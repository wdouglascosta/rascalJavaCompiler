import utils.*;
import tipos.*;
import core.*;
import java_cup.runtime.Symbol;
import java.util.List;


parser code  {:

private NodeFactory factory = new NodeFactory();

public void report_error(String message, Object info){

    try {
        RascalSymbol s = (RascalSymbol) info;
        CompilerLogger.print(message);
        String detalhe = "Erro! Linha: " + s.getLine() + " Coluna: " + s.getColumn();
        CompilerLogger.print(detalhe);
    } catch (Exception e) {

        CompilerLogger.print("Erro inesperado");
        CompilerLogger.print(message);
    }

}

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }

 public void syntax_error(RascalSymbol s){
    CompilerLogger.print("compiler has detected a syntax error at line " + s.getLine()
        + " column " + s.getColumn() + "\n");
}

:};

/* TERMINAL */
terminal T_PROGRAM;
terminal T_BEGIN;
terminal T_END;
terminal T_VAR;
terminal T_ABRE_PARENTESES;
terminal T_FECHA_PARENTESES;
terminal T_ATRIBUICAO;
terminal T_VIRGULA ;
terminal T_PONTO_E_VIRGULA ;
terminal T_DOIS_PONTOS ;
terminal T_PONTO;
terminal T_PROCEDURE;
terminal T_FUNCTION;
terminal T_FALSE;
terminal T_TRUE;
terminal T_IF;
terminal T_THEN;
terminal T_ELSE;
terminal T_WHILE;
terminal T_DO;
terminal T_READ;
terminal T_WRITE;
terminal T_AND;
terminal T_OR;
terminal T_NOT;
terminal T_DIV;
terminal Terminal T_MAIS;
terminal T_MENOS;
terminal T_MULTIPLICACAO;
terminal T_IGUAL;
terminal T_NAO_IGUAL;
terminal T_MAIOR_QUE;
terminal T_MENOR_QUE;
terminal T_MAIOR_IGUAL;
terminal T_MENOR_IGUAL;
terminal T_INT;
terminal T_BOOL;
terminal LexerToken T_NUM;
terminal LexerToken T_IDENT;

/* NON TERMINAL */
non terminal Bloco programa;
non terminal List<Comando> secao_declara_subs;
non terminal List<Comando> comando_composto;
non terminal Bloco bloco;
non terminal List<DecVar> secao_declara_vars;
non terminal List<TpDecVar> lista_declara_vars;
non terminal TpDecVar declara_vars;
non terminal List<LexerToken> lista_ident;
non terminal LexerToken tipo;
non terminal List<Comando> comandos;
non terminal Comando comando;
non terminal Comando comando_secundario;
non terminal Comando cmdExpArit;
non terminal Comando cmdAtrib;
non terminal Comando cmdChamaFunc;
non terminal Comando paramFunc;
non terminal Comando paramArit;
non terminal List<Comando> lstParams;
non terminal Comando opBinSimples;
non terminal Comando OpBinComposta;
non terminal CmdExpBin cmdExpBinSimples;
non terminal CmdExpBin cmdExpBinComposta;
non terminal Comando cmdIf;
non terminal Comando cmdWhile;
non terminal List<Comando> cmdElse;
non terminal DecVar decParamFunc;
non terminal List<DecVar> lstParamFunc;
non terminal DecProc declaraProcedimento;
non terminal DecFunc declaraFuncao;
non terminal Comando decSubs;
non terminal BlocoSub blocoSub;


start with programa;

programa ::=
	T_PROGRAM T_IDENT:p2 T_PONTO_E_VIRGULA bloco:p4 T_PONTO 		{: RESULT = factory.setNomeDoPrograma(p2, p4); :}
;

bloco ::=
    secao_declara_vars:p1 secao_declara_subs:p2 comando_composto:p3 {: RESULT = factory.buildBloco(p1, p2, p3);  :}
;

blocoSub ::=
    secao_declara_vars:p1 comando_composto:p2 {: RESULT = factory.buildBlocoSub(p1, p2);  :}
;

secao_declara_vars ::=

    |T_VAR lista_declara_vars:p2    {: RESULT = factory.buildListDecVar(p2); :}
;

lista_declara_vars ::=
     lista_declara_vars:p1 declara_vars:p2      {: RESULT = factory.buildListTpDecVar(p1, p2); :}
    |declara_vars:p1                            {: RESULT = factory.buildListTpDecVar(null, p1); :}
;

declara_vars ::=
     lista_ident:p1 T_DOIS_PONTOS tipo:p3 T_PONTO_E_VIRGULA {: RESULT = factory.buildTpDecVar(p1, p3); :}
;

lista_ident ::=
      lista_ident:p1 T_VIRGULA T_IDENT:p3 {: RESULT = factory.buildIdentList(p1, p3);:}
    | T_IDENT:p1 {: RESULT = factory.buildIdentList(null, p1); :}
;

tipo ::=
    T_IDENT:p1 {: RESULT = p1; :}
;

secao_declara_subs ::=
    secao_declara_subs:p1 decSubs:p2  {: RESULT = factory.buildLstDecSub(p1, p2); :}
    | decSubs:p1 {: RESULT = factory.buildLstDecSub(null, p1); :}
;

decSubs ::=

    | declaraProcedimento:p1     {: RESULT = p1; :}
    | declaraFuncao:p1         {: RESULT = p1; :}
;

declaraProcedimento ::=
    T_PROCEDURE T_IDENT:p2 T_ABRE_PARENTESES lstParamFunc:p4 T_FECHA_PARENTESES T_PONTO_E_VIRGULA blocoSub:p7 {: RESULT = factory.buildDecProc(p2, p4, p7); :}
;

declaraFuncao ::=
    T_FUNCTION T_IDENT:p2 T_ABRE_PARENTESES lstParamFunc:p4 T_FECHA_PARENTESES T_DOIS_PONTOS tipo:p7 T_PONTO_E_VIRGULA blocoSub:p9 {: RESULT = factory.buildDecFunc(p2, p4, p9, p7); :}
;

lstParamFunc ::=
    lstParamFunc:p1 T_VIRGULA decParamFunc:p3 {: RESULT = factory.buildLstParam(p1, p3); :}
    | decParamFunc:p1 {: RESULT = factory.buildLstParam(null, p1); :}
;

decParamFunc ::=
    T_IDENT:p1 T_DOIS_PONTOS tipo:p3 {: RESULT = factory.buildParamDecVar(p1, p3); :}
;

comando_composto ::=
    T_BEGIN comandos:p2 T_END {: RESULT = p2; :}
;

comandos ::=
      comandos:p1 comando:p2        {: RESULT = factory.buildLstComandos(p1, p2); :}
    | comando:p1                    {: RESULT = factory.buildLstComandos(null, p1); :}
;

comando ::=
      comando_secundario:p1     {: RESULT = p1; :}
    | cmdAtrib:p1               {: RESULT = p1; :}
    | cmdIf:p1                  {: RESULT = p1; :}
    | cmdWhile:p1               {: RESULT = p1; :}

;

comando_secundario ::=
      cmdExpArit:p1     {: RESULT = p1; :}
    | cmdChamaFunc:p1   {: RESULT = p1; :}
    | T_IDENT:p1        {: RESULT = p1; :}
    | T_NUM:p1          {: RESULT = p1; :}
;

cmdIf ::=
      T_IF cmdExpBinSimples:p2 T_THEN comando_composto:p5 cmdElse:p6 {: RESULT = factory.buildCmdIf(p2, p5, p6); :}
    | T_IF T_ABRE_PARENTESES cmdExpBinComposta:p2 T_FECHA_PARENTESES T_THEN comando_composto:p5 cmdElse:p6 {: RESULT = factory.buildCmdIf(p2, p5, p6); :}
;

cmdElse ::=

    | T_ELSE comando_composto:p1  {: RESULT = p1; :}
;

cmdWhile ::=
    T_WHILE T_ABRE_PARENTESES cmdExpBinComposta:p2 T_FECHA_PARENTESES T_DO comando_composto:p5 {: RESULT = factory.buildCmdWhile(p2, p5); :}
;

cmdExpBinSimples ::=
      opBinSimples:p1 T_MAIOR_QUE opBinSimples:p3       {: RESULT = factory.buildExpBin(p1,Terminal.T_MAIOR_QUE, p3); :}
    | opBinSimples:p1 T_MAIOR_IGUAL opBinSimples:p3     {: RESULT = factory.buildExpBin(p1,Terminal.T_MAIOR_IGUAL, p3); :}
    | opBinSimples:p1 T_MENOR_QUE opBinSimples:p3       {: RESULT = factory.buildExpBin(p1,Terminal.T_MENOR_QUE, p3); :}
    | opBinSimples:p1 T_MENOR_IGUAL opBinSimples:p3     {: RESULT = factory.buildExpBin(p1,Terminal.T_MENOR_IGUAL, p3); :}
    | opBinSimples:p1 T_IGUAL opBinSimples:p3           {: RESULT = factory.buildExpBin(p1,Terminal.T_IGUAL, p3); :}
    | opBinSimples:p1 T_NAO_IGUAL opBinSimples:p3       {: RESULT = factory.buildExpBin(p1,Terminal.T_NAO_IGUAL, p3); :}
;

opBinSimples ::=
      cmdChamaFunc:p1   {: RESULT = p1; :}
    | T_IDENT:p1        {: RESULT = p1; :}
    | T_NUM:p1          {: RESULT = p1; :}
;

cmdExpBinComposta ::=
      OpBinComposta:p1 T_MAIOR_QUE OpBinComposta:p3       {: RESULT = factory.buildExpBin(p1,Terminal.T_MAIOR_QUE, p3); :}
    | OpBinComposta:p1 T_MAIOR_IGUAL OpBinComposta:p3     {: RESULT = factory.buildExpBin(p1,Terminal.T_MAIOR_IGUAL, p3); :}
    | OpBinComposta:p1 T_MENOR_QUE OpBinComposta:p3       {: RESULT = factory.buildExpBin(p1,Terminal.T_MENOR_QUE, p3); :}
    | OpBinComposta:p1 T_MENOR_IGUAL OpBinComposta:p3     {: RESULT = factory.buildExpBin(p1,Terminal.T_MENOR_IGUAL, p3); :}
    | OpBinComposta:p1 T_IGUAL OpBinComposta:p3           {: RESULT = factory.buildExpBin(p1,Terminal.T_IGUAL, p3); :}
    | OpBinComposta:p1 T_NAO_IGUAL OpBinComposta:p3       {: RESULT = factory.buildExpBin(p1,Terminal.T_NAO_IGUAL, p3); :}
;

OpBinComposta ::=
      opBinSimples:p1   {: RESULT = p1; :}
    | paramArit:p1      {: RESULT = p1; :}
;

cmdChamaFunc ::=
    T_IDENT:p1 T_ABRE_PARENTESES lstParams:p3 T_FECHA_PARENTESES T_PONTO_E_VIRGULA {: RESULT = factory.buildChamaFunc(p1, p3); :}
;

lstParams ::=
      lstParams:p1 T_VIRGULA paramFunc:p3   {: RESULT = factory.buildLstComandos(p1, p3); :}
    | paramFunc:p1                          {: RESULT = factory.buildLstComandos(null, p1); :}
;

paramFunc ::=
      paramArit:p1     {: RESULT = p1; :}
    | T_IDENT:p1        {: RESULT = p1; :}
    | T_NUM:p1          {: RESULT = p1; :}
;

paramArit ::=
      comando_secundario:p1 T_MAIS paramArit:p3                         {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); :}
    | comando_secundario:p1 T_MAIS comando_secundario:p3                            {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); :}
    | comando_secundario:p1 T_MENOS paramArit:p3                        {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); :}
    | comando_secundario:p1 T_MENOS comando_secundario:p3                           {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); :}
    | comando_secundario:p1 T_MULTIPLICACAO paramArit:p3                {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); :}
    | comando_secundario:p1 T_MULTIPLICACAO comando_secundario:p3                   {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); :}
    | comando_secundario:p1 T_DIV paramArit:p3                          {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); :}
    | comando_secundario:p1 T_DIV comando_secundario:p3                             {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); :}
;

cmdExpArit ::=
      comando_secundario:p1 T_MAIS cmdExpArit:p3                         {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); :}
    | comando_secundario:p1 T_MAIS comando_secundario:p3 T_PONTO_E_VIRGULA                           {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); :}
    | comando_secundario:p1 T_MENOS cmdExpArit:p3                        {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); :}
    | comando_secundario:p1 T_MENOS comando_secundario:p3 T_PONTO_E_VIRGULA                          {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); :}
    | comando_secundario:p1 T_MULTIPLICACAO cmdExpArit:p3                {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); :}
    | comando_secundario:p1 T_MULTIPLICACAO comando_secundario:p3 T_PONTO_E_VIRGULA                  {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); :}
    | comando_secundario:p1 T_DIV cmdExpArit:p3                          {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); :}
    | comando_secundario:p1 T_DIV comando_secundario:p3 T_PONTO_E_VIRGULA                            {: RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); :}
;

cmdAtrib ::=
      T_IDENT:p1 T_ATRIBUICAO comando_secundario:p3                    {: RESULT = factory.buildCmdAtrib(p1, p3); :}
    | T_IDENT:p1 T_ATRIBUICAO comando_secundario:p3 T_PONTO_E_VIRGULA  {: RESULT = factory.buildCmdAtrib(p1, p3); :}
;



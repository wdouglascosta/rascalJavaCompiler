import utils.*;
import java_cup.runtime.Symbol;
import generatedSources.sym;


parser code  {:

 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
 
 public void syntax_error(Symbol s){
    System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right + "\n");
}

:};

/* TERMINAL */
terminal T_PROGRAM;
terminal T_BEGIN;
terminal T_END;
terminal T_VAR;
terminal T_ABRE_PARENTESES;
terminal T_FECHA_PARENTESES;
terminal T_ATRIBUICAO;
terminal T_VIRGULA ;
terminal T_PONTO_E_VIRGULA ;
terminal T_DOIS_PONTOS ;
terminal T_PONTO;
terminal T_PROCEDURE;
terminal T_FUNCTION;
terminal T_FALSE;
terminal T_TRUE;
terminal T_IF;
terminal T_THEN;
terminal T_ELSE;
terminal T_WHILE;
terminal T_DO;
terminal T_READ;
terminal T_WRITE;
terminal T_AND;
terminal T_OR;
terminal T_NOT;
terminal T_DIV;
terminal T_MAIS;
terminal T_MENOS;
terminal T_MULTIPLICACAO;
terminal T_IGUAL;
terminal T_NAO_IGUAL;
terminal T_MAIOR_QUE;
terminal T_MENOR_QUE;
terminal T_MAIOR_IGUAL;
terminal T_MENOR_IGUAL;
terminal T_INT;
terminal T_BOOL;
terminal T_NUM;
terminal T_IDENT;

/* NON TERMINAL */
non terminal programa;
non terminal secao_declara_subs;
non terminal comando_composto;
non terminal bloco;
non terminal secao_declara_vars;
non terminal lista_declara_vars;
non terminal declara_vars;
non terminal lista_ident;
non terminal tipo;


start with programa;

programa ::=
	T_PROGRAM T_IDENT T_PONTO_E_VIRGULA bloco T_PONTO 		{: CompilerLogger.print("Program definition"); :}
;

bloco ::=
    secao_declara_vars secao_declara_subs comando_composto {: :}
;

secao_declara_vars ::=
    |
    |T_VAR lista_declara_vars    {: :}
;

lista_declara_vars ::=
    |declara_vars lista_declara_vars    {: :}
    |declara_vars                       {: :}
;

declara_vars ::=
    |lista_ident T_DOIS_PONTOS tipo T_PONTO_E_VIRGULA {: :}
;

lista_ident ::=
    |lista_ident T_VIRGULA T_IDENT {: :}
    |T_IDENT {: :}
;

tipo ::=
    T_IDENT {: :}
;


secao_declara_subs ::=

;

comando_composto ::=

;



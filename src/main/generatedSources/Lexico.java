/* The following code was generated by JFlex 1.6.1 */

package generatedSources;
import java_cup.runtime.*;
import utils.RascalSymbol;
import generatedSources.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/mtuser/Downloads/compiladorJava/compilador/src/main/resources/jflex/lexico.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\5\1\0\1\11\1\10\22\0\1\11\6\0\1\0"+
    "\1\36\1\37\1\45\1\43\1\41\1\44\1\40\1\0\1\3\11\4"+
    "\1\51\1\42\1\47\1\46\1\50\2\0\32\6\4\0\1\6\1\0"+
    "\1\16\1\31\1\21\1\23\1\22\1\25\1\15\1\34\1\30\2\6"+
    "\1\32\1\17\1\26\1\14\1\12\1\6\1\13\1\33\1\27\1\24"+
    "\1\20\1\35\3\6\1\1\1\0\1\2\54\0\1\6\12\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"+
    "\16\0\5\6\7\0\1\6\1\0\1\6\201\0\5\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\123\6\1\0\213\6\10\0\246\6\1\0\46\6"+
    "\2\0\1\6\7\0\47\6\110\0\33\6\5\0\3\6\55\0\53\6"+
    "\25\0\12\7\4\0\2\6\1\0\143\6\1\0\1\6\17\0\2\6"+
    "\7\0\2\6\12\7\3\6\2\0\1\6\20\0\1\6\1\0\36\6"+
    "\35\0\131\6\13\0\1\6\16\0\12\7\41\6\11\0\2\6\4\0"+
    "\1\6\5\0\26\6\4\0\1\6\11\0\1\6\3\0\1\6\27\0"+
    "\31\6\107\0\23\6\121\0\66\6\3\0\1\6\22\0\1\6\7\0"+
    "\12\6\4\0\12\7\1\0\20\6\4\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\3\0\1\6\20\0"+
    "\1\6\15\0\2\6\1\0\3\6\4\0\12\7\2\6\23\0\6\6"+
    "\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\37\0\4\6\1\0\1\6\7\0\12\7\2\0\3\6"+
    "\20\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\3\0\1\6\22\0\1\6\17\0\2\6\4\0\12\7"+
    "\25\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\3\0\1\6\36\0\2\6\1\0\3\6\4\0\12\7"+
    "\1\0\1\6\21\0\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\14\6\26\0\1\6\25\0\12\7\25\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\20\6\3\0\1\6\32\0\2\6\6\0\2\6"+
    "\4\0\12\7\25\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\3\0\1\6\40\0\1\6\1\0\2\6\4\0\12\7"+
    "\1\0\2\6\22\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6"+
    "\20\0\1\6\21\0\2\6\4\0\12\7\12\0\6\6\5\0\22\6"+
    "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\37\0\12\7"+
    "\21\0\60\6\1\0\2\6\14\0\7\6\11\0\12\7\47\0\2\6"+
    "\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6"+
    "\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\4\6\1\0\2\6\11\0\1\6\2\0\5\6\1\0\1\6"+
    "\11\0\12\7\2\0\4\6\40\0\1\6\37\0\12\7\26\0\10\6"+
    "\1\0\44\6\33\0\5\6\163\0\53\6\24\0\1\6\12\7\6\0"+
    "\6\6\4\0\4\6\3\0\1\6\3\0\2\6\7\0\3\6\4\0"+
    "\15\6\14\0\1\6\1\0\12\7\6\0\46\6\1\0\1\6\5\0"+
    "\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0"+
    "\71\6\1\0\4\6\2\0\103\6\45\0\20\6\20\0\125\6\14\0"+
    "\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\6\0\10\6\7\0"+
    "\15\6\1\0\4\6\16\0\22\6\16\0\22\6\16\0\15\6\1\0"+
    "\3\6\17\0\64\6\43\0\1\6\4\0\1\6\3\0\12\7\46\0"+
    "\12\7\6\0\130\6\10\0\51\6\1\0\1\6\5\0\106\6\12\0"+
    "\37\6\47\0\12\7\36\6\2\0\5\6\13\0\54\6\25\0\7\6"+
    "\10\0\12\7\46\0\27\6\11\0\65\6\53\0\12\7\6\0\12\7"+
    "\15\0\1\6\135\0\57\6\21\0\7\6\4\0\12\7\51\0\36\6"+
    "\15\0\2\6\12\7\54\6\32\0\44\6\34\0\12\7\3\0\3\6"+
    "\12\7\44\6\153\0\4\6\1\0\4\6\3\0\2\6\11\0\300\6"+
    "\100\0\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"+
    "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\164\0\1\6"+
    "\15\0\1\6\20\0\15\6\145\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6"+
    "\64\0\2\6\u0a7b\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6"+
    "\3\0\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6"+
    "\7\0\1\6\20\0\27\6\11\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\120\0\1\6\u01d5\0\2\6\52\0\5\6\5\0\2\6\4\0\126\6"+
    "\6\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6"+
    "\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6"+
    "\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6"+
    "\20\0\37\6\2\0\106\6\61\0\11\6\2\0\147\6\2\0\4\6"+
    "\1\0\36\6\2\0\2\6\105\0\13\6\1\0\3\6\1\0\4\6"+
    "\1\0\27\6\35\0\64\6\16\0\62\6\34\0\12\7\30\0\6\6"+
    "\3\0\1\6\4\0\12\7\34\6\12\0\27\6\31\0\35\6\7\0"+
    "\57\6\34\0\1\6\12\7\6\0\5\6\1\0\12\6\12\7\5\6"+
    "\1\0\51\6\27\0\3\6\1\0\10\6\4\0\12\7\6\0\27\6"+
    "\3\0\1\6\3\0\62\6\1\0\1\6\3\0\2\6\2\0\5\6"+
    "\2\0\1\6\1\0\1\6\30\0\3\6\2\0\13\6\7\0\3\6"+
    "\14\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6"+
    "\1\0\53\6\1\0\4\6\4\0\2\6\132\0\43\6\15\0\12\7"+
    "\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6"+
    "\46\0\7\6\14\0\5\6\5\0\1\6\1\0\12\6\1\0\15\6"+
    "\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\14\6\164\0\5\6"+
    "\1\0\207\6\23\0\12\7\7\0\32\6\6\0\32\6\13\0\131\6"+
    "\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\43\0\14\6"+
    "\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6"+
    "\42\0\173\6\u0185\0\35\6\3\0\61\6\57\0\40\6\20\0\21\6"+
    "\1\0\10\6\6\0\46\6\12\0\36\6\2\0\44\6\4\0\10\6"+
    "\60\0\236\6\2\0\12\7\126\0\50\6\10\0\64\6\234\0\u0137\6"+
    "\11\0\26\6\12\0\10\6\230\0\6\6\2\0\1\6\1\0\54\6"+
    "\1\0\2\6\3\0\1\6\2\0\27\6\12\0\27\6\11\0\37\6"+
    "\141\0\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6"+
    "\17\0\4\6\1\0\3\6\1\0\33\6\54\0\35\6\3\0\35\6"+
    "\43\0\10\6\1\0\34\6\33\0\66\6\12\0\26\6\12\0\23\6"+
    "\15\0\22\6\156\0\111\6\u03ba\0\65\6\56\0\12\7\23\0\55\6"+
    "\40\0\31\6\7\0\12\7\11\0\44\6\17\0\12\7\20\0\43\6"+
    "\3\0\1\6\14\0\60\6\16\0\4\6\13\0\12\7\1\6\45\0"+
    "\22\6\1\0\31\6\204\0\57\6\21\0\12\7\13\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\3\0"+
    "\1\6\37\0\5\6\u011e\0\60\6\24\0\2\6\1\0\1\6\10\0"+
    "\12\7\246\0\57\6\121\0\60\6\24\0\1\6\13\0\12\7\46\0"+
    "\53\6\25\0\12\7\u01d6\0\100\6\12\7\25\0\1\6\u01c0\0\71\6"+
    "\u0507\0\u0399\6\u0c67\0\u042f\6\u33d1\0\u0239\6\7\0\37\6\1\0\12\7"+
    "\146\0\36\6\22\0\60\6\20\0\4\6\14\0\12\7\11\0\25\6"+
    "\5\0\23\6\u0370\0\105\6\13\0\1\6\102\0\15\6\u4060\0\2\6"+
    "\u0bfe\0\153\6\5\0\15\6\3\0\11\6\7\0\12\6\u1766\0\125\6"+
    "\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6"+
    "\1\0\14\6\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6"+
    "\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6"+
    "\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7"+
    "\u1000\0\305\6\u053b\0\4\6\1\0\33\6\1\0\2\6\1\0\1\6"+
    "\2\0\1\6\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6"+
    "\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6"+
    "\1\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6"+
    "\1\0\7\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6"+
    "\1\0\21\6\5\0\3\6\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6"+
    "\51\0\u1035\6\13\0\336\6\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\2\15\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\3\1\20\4\3\1\21\6\3\1\22"+
    "\4\3\1\23\1\24\1\25\1\26\2\3\1\27\1\30"+
    "\1\31\1\3\1\32\2\3\1\33\10\3\1\34\1\35"+
    "\2\3\1\36\1\37\6\3\1\40\2\3\1\41\1\42"+
    "\1\43\4\3\1\44\2\3\1\45\1\3\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\124\0\250\0\322\0\374"+
    "\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\124\0\124\0\124\0\124"+
    "\0\124\0\124\0\124\0\124\0\124\0\u031e\0\u0348\0\u0372"+
    "\0\u039c\0\u03c6\0\250\0\u03f0\0\u041a\0\u0444\0\u046e\0\250"+
    "\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540\0\u056a\0\250\0\u0594"+
    "\0\u05be\0\u05e8\0\u0612\0\124\0\124\0\124\0\124\0\u063c"+
    "\0\u0666\0\250\0\250\0\250\0\u0690\0\250\0\u06ba\0\u06e4"+
    "\0\250\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a"+
    "\0\u0834\0\250\0\250\0\u085e\0\u0888\0\250\0\250\0\u08b2"+
    "\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\250\0\u09ae\0\u09d8"+
    "\0\250\0\250\0\250\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\250"+
    "\0\u0aaa\0\u0ad4\0\250\0\u0afe\0\250\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\0\1\3\1\4\1\5\1\6\1\0"+
    "\1\7\1\5\1\10\1\11\1\12\1\6\1\13\1\6"+
    "\1\14\1\6\1\15\1\16\1\6\1\17\1\20\1\21"+
    "\1\22\1\23\3\6\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\2\2\1\5\47\2\55\0\2\4\50\0\2\6\1\0"+
    "\2\6\2\0\24\6\21\0\1\5\47\0\2\6\1\0"+
    "\2\6\2\0\1\6\1\41\22\6\17\0\2\6\1\0"+
    "\2\6\2\0\10\6\1\42\13\6\17\0\2\6\1\0"+
    "\2\6\2\0\1\6\1\43\22\6\17\0\2\6\1\0"+
    "\2\6\2\0\14\6\1\44\7\6\17\0\2\6\1\0"+
    "\2\6\2\0\4\6\1\45\17\6\17\0\2\6\1\0"+
    "\2\6\2\0\14\6\1\46\3\6\1\47\3\6\17\0"+
    "\2\6\1\0\2\6\2\0\2\6\1\50\13\6\1\51"+
    "\5\6\17\0\2\6\1\0\2\6\2\0\4\6\1\52"+
    "\5\6\1\53\11\6\17\0\2\6\1\0\2\6\2\0"+
    "\2\6\1\54\21\6\17\0\2\6\1\0\2\6\2\0"+
    "\1\6\1\55\20\6\1\56\1\6\17\0\2\6\1\0"+
    "\2\6\2\0\13\6\1\57\10\6\17\0\2\6\1\0"+
    "\2\6\2\0\2\6\1\60\5\6\1\61\13\6\17\0"+
    "\2\6\1\0\2\6\2\0\1\6\1\62\20\6\1\63"+
    "\1\6\62\0\1\64\1\0\1\65\47\0\1\66\51\0"+
    "\1\67\6\0\2\6\1\0\2\6\2\0\2\6\1\70"+
    "\21\6\17\0\2\6\1\0\2\6\2\0\4\6\1\71"+
    "\17\6\17\0\2\6\1\0\2\6\2\0\11\6\1\72"+
    "\12\6\17\0\2\6\1\0\2\6\2\0\1\6\1\73"+
    "\22\6\17\0\2\6\1\0\2\6\2\0\11\6\1\74"+
    "\12\6\17\0\2\6\1\0\2\6\2\0\21\6\1\75"+
    "\2\6\17\0\2\6\1\0\2\6\2\0\6\6\1\76"+
    "\15\6\17\0\2\6\1\0\2\6\2\0\20\6\1\77"+
    "\3\6\17\0\2\6\1\0\2\6\2\0\14\6\1\100"+
    "\7\6\17\0\2\6\1\0\2\6\2\0\15\6\1\101"+
    "\6\6\17\0\2\6\1\0\2\6\2\0\12\6\1\102"+
    "\11\6\17\0\2\6\1\0\2\6\2\0\10\6\1\103"+
    "\13\6\17\0\2\6\1\0\2\6\2\0\2\6\1\104"+
    "\21\6\17\0\2\6\1\0\2\6\2\0\3\6\1\105"+
    "\20\6\17\0\2\6\1\0\2\6\2\0\16\6\1\106"+
    "\5\6\17\0\2\6\1\0\2\6\2\0\16\6\1\107"+
    "\5\6\17\0\2\6\1\0\2\6\2\0\3\6\1\110"+
    "\3\6\1\111\14\6\17\0\2\6\1\0\2\6\2\0"+
    "\11\6\1\112\12\6\17\0\2\6\1\0\2\6\2\0"+
    "\10\6\1\113\13\6\17\0\2\6\1\0\2\6\2\0"+
    "\21\6\1\114\2\6\17\0\2\6\1\0\2\6\2\0"+
    "\7\6\1\115\14\6\17\0\2\6\1\0\2\6\2\0"+
    "\10\6\1\116\13\6\17\0\2\6\1\0\2\6\2\0"+
    "\14\6\1\117\7\6\17\0\2\6\1\0\2\6\2\0"+
    "\20\6\1\120\3\6\17\0\2\6\1\0\2\6\2\0"+
    "\16\6\1\121\5\6\17\0\2\6\1\0\2\6\2\0"+
    "\15\6\1\122\6\6\17\0\2\6\1\0\2\6\2\0"+
    "\20\6\1\123\3\6\17\0\2\6\1\0\2\6\2\0"+
    "\1\6\1\124\22\6\17\0\2\6\1\0\2\6\2\0"+
    "\10\6\1\125\13\6\17\0\2\6\1\0\2\6\2\0"+
    "\10\6\1\126\13\6\17\0\2\6\1\0\2\6\2\0"+
    "\15\6\1\127\6\6\17\0\2\6\1\0\2\6\2\0"+
    "\10\6\1\130\13\6\17\0\2\6\1\0\2\6\2\0"+
    "\14\6\1\131\7\6\17\0\2\6\1\0\2\6\2\0"+
    "\10\6\1\132\13\6\17\0\2\6\1\0\2\6\2\0"+
    "\10\6\1\133\13\6\17\0\2\6\1\0\2\6\2\0"+
    "\4\6\1\134\17\6\17\0\2\6\1\0\2\6\2\0"+
    "\11\6\1\135\12\6\17\0\2\6\1\0\2\6\2\0"+
    "\16\6\1\136\5\6\17\0\2\6\1\0\2\6\2\0"+
    "\4\6\1\137\17\6\17\0\2\6\1\0\2\6\2\0"+
    "\5\6\1\140\16\6\17\0\2\6\1\0\2\6\2\0"+
    "\12\6\1\141\11\6\17\0\2\6\1\0\2\6\2\0"+
    "\2\6\1\142\21\6\17\0\2\6\1\0\2\6\2\0"+
    "\14\6\1\143\7\6\17\0\2\6\1\0\2\6\2\0"+
    "\1\6\1\144\22\6\17\0\2\6\1\0\2\6\2\0"+
    "\14\6\1\145\7\6\17\0\2\6\1\0\2\6\2\0"+
    "\10\6\1\146\13\6\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2856];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\17\1\11\11\26\1\4\11"+
    "\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[102];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

   StringBuffer string = new StringBuffer();

private Symbol symbol(int type) {
	return new utils.RascalSymbol(type, yyline+1, yycolumn+1);
}

private Symbol symbol(int type, Object value) {
	return new utils.RascalSymbol(type, yyline+1, yycolumn+1, value);
}
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2442) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.T_NUM, new Integer(yytext()));
            }
          case 40: break;
          case 2: 
            { /*Ignore*/
            }
          case 41: break;
          case 3: 
            { return symbol(sym.T_IDENT, yytext());
            }
          case 42: break;
          case 4: 
            { return symbol(sym.T_ABRE_PARENTESES);
            }
          case 43: break;
          case 5: 
            { return symbol(sym.T_FECHA_PARENTESES);
            }
          case 44: break;
          case 6: 
            { return symbol(sym.T_PONTO);
            }
          case 45: break;
          case 7: 
            { return symbol(sym.T_VIRGULA);
            }
          case 46: break;
          case 8: 
            { return symbol(sym.T_PONTO_E_VIRGULA);
            }
          case 47: break;
          case 9: 
            { return symbol(sym.T_MAIS);
            }
          case 48: break;
          case 10: 
            { return symbol(sym.T_MENOS);
            }
          case 49: break;
          case 11: 
            { return symbol(sym.T_MULTIPLICACAO);
            }
          case 50: break;
          case 12: 
            { return symbol(sym.T_IGUAL);
            }
          case 51: break;
          case 13: 
            { return symbol(sym.T_MENOR_QUE);
            }
          case 52: break;
          case 14: 
            { return symbol(sym.T_MAIOR_QUE);
            }
          case 53: break;
          case 15: 
            { return symbol(sym.T_DOIS_PONTOS);
            }
          case 54: break;
          case 16: 
            { return symbol(sym.T_OR);
            }
          case 55: break;
          case 17: 
            { return symbol(sym.T_DO);
            }
          case 56: break;
          case 18: 
            { return symbol(sym.T_IF);
            }
          case 57: break;
          case 19: 
            { return symbol(sym.T_MENOR_IGUAL);
            }
          case 58: break;
          case 20: 
            { return symbol(sym.T_NAO_IGUAL);
            }
          case 59: break;
          case 21: 
            { return symbol(sym.T_MAIOR_IGUAL);
            }
          case 60: break;
          case 22: 
            { return symbol(sym.T_ATRIBUICAO);
            }
          case 61: break;
          case 23: 
            { return symbol(sym.T_AND);
            }
          case 62: break;
          case 24: 
            { return symbol(sym.T_VAR);
            }
          case 63: break;
          case 25: 
            { return symbol(sym.T_END);
            }
          case 64: break;
          case 26: 
            { return symbol(sym.T_DIV);
            }
          case 65: break;
          case 27: 
            { return symbol(sym.T_NOT);
            }
          case 66: break;
          case 28: 
            { return symbol(sym.T_READ);
            }
          case 67: break;
          case 29: 
            { return symbol(sym.T_ELSE);
            }
          case 68: break;
          case 30: 
            { return symbol(sym.T_TRUE);
            }
          case 69: break;
          case 31: 
            { return symbol(sym.T_THEN);
            }
          case 70: break;
          case 32: 
            { return symbol(sym.T_FALSE);
            }
          case 71: break;
          case 33: 
            { return symbol(sym.T_BEGIN);
            }
          case 72: break;
          case 34: 
            { return symbol(sym.T_WRITE);
            }
          case 73: break;
          case 35: 
            { return symbol(sym.T_WHILE);
            }
          case 74: break;
          case 36: 
            { return symbol(sym.T_PROGRAM);
            }
          case 75: break;
          case 37: 
            { return symbol(sym.T_BOOL);
            }
          case 76: break;
          case 38: 
            { return symbol(sym.T_FUNCTION);
            }
          case 77: break;
          case 39: 
            { return symbol(sym.T_PROCEDURE);
            }
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

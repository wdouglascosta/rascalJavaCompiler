
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package generatedSources;

import utils.*;
import tipos.*;
import core.*;
import java_cup.runtime.Symbol;
import generatedSources.sym;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintatico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Sintatico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\007\000\002\005" +
    "\005\000\002\006\002\000\002\006\002\000\002\006\004" +
    "\000\002\007\002\000\002\007\004\000\002\007\003\000" +
    "\002\010\002\000\002\010\006\000\002\011\002\000\002" +
    "\011\005\000\002\011\003\000\002\012\003\000\002\003" +
    "\002\000\002\004\005\000\002\013\002\000\002\013\004" +
    "\000\002\013\003\000\002\014\002\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\017\007\000\002\021\002\000\002\021" +
    "\005\000\002\021\003\000\002\020\002\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\015\002\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\016\002\000\002\016\005" +
    "\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\004\004\005\001\002\000\004\002\075\001" +
    "\002\000\004\052\006\001\002\000\004\014\007\001\002" +
    "\000\006\005\ufffe\007\012\001\002\000\004\005\ufff2\001" +
    "\002\000\004\016\026\001\002\000\012\005\ufffb\013\ufffb" +
    "\015\ufffb\052\016\001\002\000\012\005\ufffc\013\ufff8\015" +
    "\ufff8\052\016\001\002\000\006\013\017\015\020\001\002" +
    "\000\012\005\ufff9\013\ufff9\015\ufff9\052\ufff9\001\002\000" +
    "\006\013\ufff4\015\ufff4\001\002\000\004\052\024\001\002" +
    "\000\004\052\022\001\002\000\004\014\023\001\002\000" +
    "\004\014\ufff3\001\002\000\012\005\ufff7\013\ufff7\015\ufff7" +
    "\052\ufff7\001\002\000\006\013\ufff5\015\ufff5\001\002\000" +
    "\012\005\ufffa\013\ufffa\015\ufffa\052\ufffa\001\002\000\004" +
    "\002\000\001\002\000\004\005\031\001\002\000\004\016" +
    "\uffff\001\002\000\020\006\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\051\040\052\037\001\002\000\026\006\uffeb\011" +
    "\uffeb\013\uffeb\014\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\051\uffeb\052\uffeb\001\002\000\026\006\uffea\011\uffea\013" +
    "\uffea\014\uffea\035\uffea\036\uffea\037\uffea\040\uffea\051\uffea" +
    "\052\uffea\001\002\000\026\006\uffec\011\uffec\013\uffec\014" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\051\uffec\052\uffec" +
    "\001\002\000\020\006\074\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\051\040\052\037\001\002\000\020\006\uffee\035\046" +
    "\036\045\037\047\040\044\051\uffee\052\uffee\001\002\000" +
    "\032\006\uffe9\010\041\011\uffe9\012\042\013\uffe9\014\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\051\uffe9\052\uffe9\001" +
    "\002\000\026\006\uffe8\011\uffe8\013\uffe8\014\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\051\uffe8\052\uffe8\001\002\000" +
    "\022\011\uffe6\013\uffe6\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\051\066\052\065\001\002\000\026\006\uffed\011\uffed\013" +
    "\uffed\014\uffed\035\uffed\036\uffed\037\uffed\040\uffed\051\040" +
    "\052\037\001\002\000\026\006\uffd5\011\uffd5\013\uffd5\014" +
    "\050\035\046\036\045\037\047\040\044\051\uffd5\052\uffd5" +
    "\001\002\000\026\006\uffed\011\uffed\013\uffed\014\uffed\035" +
    "\uffed\036\uffed\037\uffed\040\uffed\051\040\052\037\001\002" +
    "\000\026\006\uffed\011\uffed\013\uffed\014\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\051\040\052\037\001\002\000\026" +
    "\006\uffed\011\uffed\013\uffed\014\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\051\040\052\037\001\002\000\026\006\uffed" +
    "\011\uffed\013\uffed\014\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\051\040\052\037\001\002\000\026\006\uffd4\011\uffd4" +
    "\013\uffd4\014\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\051" +
    "\uffd4\052\uffd4\001\002\000\026\006\uffec\011\uffec\013\uffec" +
    "\014\uffec\035\uffec\036\uffec\037\uffec\040\uffec\051\uffec\052" +
    "\uffec\001\002\000\026\006\uffdb\011\uffdb\013\uffdb\014\uffdb" +
    "\035\046\036\045\037\047\040\044\051\uffdb\052\uffdb\001" +
    "\002\000\026\006\uffec\011\uffec\013\uffec\014\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\051\uffec\052\uffec\001\002\000" +
    "\026\006\uffd7\011\uffd7\013\uffd7\014\uffd7\035\046\036\045" +
    "\037\047\040\044\051\uffd7\052\uffd7\001\002\000\026\006" +
    "\uffdd\011\uffdd\013\uffdd\014\uffdd\035\046\036\045\037\047" +
    "\040\044\051\uffdd\052\uffdd\001\002\000\026\006\uffec\011" +
    "\uffec\013\uffec\014\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\051\uffec\052\uffec\001\002\000\026\006\uffec\011\uffec\013" +
    "\uffec\014\uffec\035\uffec\036\uffec\037\uffec\040\uffec\051\uffec" +
    "\052\uffec\001\002\000\026\006\uffd9\011\uffd9\013\uffd9\014" +
    "\uffd9\035\046\036\045\037\047\040\044\051\uffd9\052\uffd9" +
    "\001\002\000\006\011\uffe4\013\uffe4\001\002\000\016\011" +
    "\uffe2\013\uffe2\035\uffec\036\uffec\037\uffec\040\uffec\001\002" +
    "\000\012\035\046\036\045\037\047\040\044\001\002\000" +
    "\006\011\067\013\070\001\002\000\022\010\041\011\uffe1" +
    "\012\042\013\uffe1\035\uffe9\036\uffe9\037\uffe9\040\uffe9\001" +
    "\002\000\016\011\uffe0\013\uffe0\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\001\002\000\004\014\072\001\002\000\022\011" +
    "\uffe3\013\uffe3\035\uffed\036\uffed\037\uffed\040\uffed\051\066" +
    "\052\065\001\002\000\006\011\uffe5\013\uffe5\001\002\000" +
    "\026\006\uffe7\011\uffe7\013\uffe7\014\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\051\uffe7\052\uffe7\001\002\000\020\006" +
    "\uffef\035\046\036\045\037\047\040\044\051\uffef\052\uffef" +
    "\001\002\000\004\016\ufff1\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\010\006\007" +
    "\001\001\000\004\003\026\001\001\000\002\001\001\000" +
    "\010\007\012\010\014\011\013\001\001\000\006\010\024" +
    "\011\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\027\001\001\000\002\001\001\000\014\013\034\014" +
    "\035\015\033\016\031\017\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\072\015" +
    "\033\016\031\017\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\062\015\061\016" +
    "\031\017\032\020\060\021\063\001\001\000\012\014\042" +
    "\015\033\016\031\017\032\001\001\000\002\001\001\000" +
    "\012\014\057\015\056\016\031\017\032\001\001\000\012" +
    "\014\054\015\055\016\031\017\032\001\001\000\012\014" +
    "\053\015\052\016\031\017\032\001\001\000\012\014\051" +
    "\015\050\016\031\017\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\062\015\061" +
    "\016\031\017\032\020\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private NodeFactory factory = new NodeFactory();

public void report_error(String message, Object info){

    try {
        RascalSymbol s = (RascalSymbol) info;
        CompilerLogger.print(message);
        String detalhe = "Erro! Linha: " + s.getLine() + " Coluna: " + s.getColumn();
        CompilerLogger.print(detalhe);
    } catch (Exception e) {

        CompilerLogger.print("Erro inesperado");
        CompilerLogger.print(message);
    }

}

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }

 public void syntax_error(RascalSymbol s){
    CompilerLogger.print("compiler has detected a syntax error at line " + s.getLine()
        + " column " + s.getColumn() + "\n");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintatico$actions {
  private final Sintatico parser;

  /** Constructor */
  CUP$Sintatico$actions(Sintatico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintatico$do_action_part00000000(
    int                        CUP$Sintatico$act_num,
    java_cup.runtime.lr_parser CUP$Sintatico$parser,
    java.util.Stack            CUP$Sintatico$stack,
    int                        CUP$Sintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintatico$result;

      /* select the action based on the action number */
      switch (CUP$Sintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Bloco start_val = (Bloco)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		RESULT = start_val;
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintatico$parser.done_parsing();
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= T_PROGRAM T_IDENT T_PONTO_E_VIRGULA bloco T_PONTO 
            {
              Bloco RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Bloco p4 = (Bloco)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = p4 ; CompilerLogger.print("retornou na raiz"); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloco ::= secao_declara_vars secao_declara_subs comando_composto 
            {
              Bloco RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<DecVar> p1 = (List<DecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<Comando> p3 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildBloco(p1, null, p3);  
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("bloco",3, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // secao_declara_vars ::= 
            {
              List<DecVar> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_vars",4, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // secao_declara_vars ::= 
            {
              List<DecVar> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_vars",4, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // secao_declara_vars ::= T_VAR lista_declara_vars 
            {
              List<DecVar> RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<TpDecVar> p2 = (List<TpDecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildListDecVar(p2); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_vars",4, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declara_vars ::= 
            {
              List<TpDecVar> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_declara_vars",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_declara_vars ::= lista_declara_vars declara_vars 
            {
              List<TpDecVar> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<TpDecVar> p1 = (List<TpDecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		TpDecVar p2 = (TpDecVar)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildListTpDecVar(p1, p2); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_declara_vars",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_declara_vars ::= declara_vars 
            {
              List<TpDecVar> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		TpDecVar p1 = (TpDecVar)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildListTpDecVar(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_declara_vars",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declara_vars ::= 
            {
              TpDecVar RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("declara_vars",6, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declara_vars ::= lista_ident T_DOIS_PONTOS tipo T_PONTO_E_VIRGULA 
            {
              TpDecVar RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		List<LexerToken> p1 = (List<LexerToken>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		LexerToken p3 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildTpDecVar(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("declara_vars",6, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_ident ::= 
            {
              List<LexerToken> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_ident",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_ident ::= lista_ident T_VIRGULA T_IDENT 
            {
              List<LexerToken> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<LexerToken> p1 = (List<LexerToken>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p3 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildIdentList(p1, p3);
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_ident",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_ident ::= T_IDENT 
            {
              List<LexerToken> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildIdentList(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_ident",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= T_IDENT 
            {
              LexerToken RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // secao_declara_subs ::= 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_subs",1, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comando_composto ::= T_BEGIN comandos T_END 
            {
              List<Comando> RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<Comando> p2 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = p2; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando_composto",2, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comandos ::= 
            {
              List<Comando> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comandos",9, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comandos ::= comandos comando 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<Comando> p1 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p2 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstComandos(p1, p2); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comandos",9, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comandos ::= comando 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstComandos(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comandos",9, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comando ::= 
            {
              Comando RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comando ::= cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comando ::= cmdAtrib 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comando ::= cmdChamaFunc 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comando ::= T_IDENT 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando ::= T_NUM 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cmdChamaFunc ::= T_IDENT T_ABRE_PARENTESES lstParams T_FECHA_PARENTESES T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<Comando> p3 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		 RESULT = factory.buildChamaFunc(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdChamaFunc",13, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lstParams ::= 
            {
              List<Comando> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lstParams",15, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lstParams ::= lstParams T_VIRGULA paramFunc 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<Comando> p1 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstComandos(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lstParams",15, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lstParams ::= paramFunc 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstComandos(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lstParams",15, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // paramFunc ::= 
            {
              Comando RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramFunc",14, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramFunc ::= cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramFunc",14, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramFunc ::= T_IDENT 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramFunc",14, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramFunc ::= T_NUM 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramFunc",14, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cmdExpArit ::= 
            {
              Comando RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cmdExpArit ::= comando T_MAIS cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cmdExpArit ::= comando T_MAIS comando 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cmdExpArit ::= comando T_MENOS cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cmdExpArit ::= comando T_MENOS comando 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cmdExpArit ::= comando T_MULTIPLICACAO cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cmdExpArit ::= comando T_MULTIPLICACAO comando 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cmdExpArit ::= comando T_DIV cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cmdExpArit ::= comando T_DIV comando 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cmdAtrib ::= 
            {
              Comando RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdAtrib",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cmdAtrib ::= T_IDENT T_ATRIBUICAO comando 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildCmdAtrib(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdAtrib",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cmdAtrib ::= T_IDENT T_ATRIBUICAO comando T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildCmdAtrib(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdAtrib",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintatico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintatico$do_action(
    int                        CUP$Sintatico$act_num,
    java_cup.runtime.lr_parser CUP$Sintatico$parser,
    java.util.Stack            CUP$Sintatico$stack,
    int                        CUP$Sintatico$top)
    throws java.lang.Exception
    {
              return CUP$Sintatico$do_action_part00000000(
                               CUP$Sintatico$act_num,
                               CUP$Sintatico$parser,
                               CUP$Sintatico$stack,
                               CUP$Sintatico$top);
    }
}

}

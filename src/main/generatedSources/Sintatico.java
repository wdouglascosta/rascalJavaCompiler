
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package generatedSources;

import utils.*;
import tipos.*;
import core.*;
import java_cup.runtime.Symbol;
import generatedSources.sym;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintatico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Sintatico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\007\000\002\005" +
    "\005\000\002\040\004\000\002\006\002\000\002\006\004" +
    "\000\002\007\004\000\002\007\003\000\002\010\006\000" +
    "\002\011\005\000\002\011\003\000\002\012\003\000\002" +
    "\003\004\000\002\003\003\000\002\037\003\000\002\037" +
    "\003\000\002\035\011\000\002\036\013\000\002\034\005" +
    "\000\002\034\003\000\002\033\005\000\002\004\005\000" +
    "\002\013\004\000\002\013\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\030\007\000\002\030\011\000\002\032\002\000" +
    "\002\032\004\000\002\031\010\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\025\003\000\002\025\003\000\002\020" +
    "\007\000\002\023\005\000\002\023\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\016\005\000\002\016\006\000\002\016\005" +
    "\000\002\016\006\000\002\016\005\000\002\016\006\000" +
    "\002\016\005\000\002\016\006\000\002\017\005\000\002" +
    "\017\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\004\005\001\002\000\004\002\242\001" +
    "\002\000\004\052\006\001\002\000\004\014\007\001\002" +
    "\000\010\007\012\017\ufffd\020\ufffd\001\002\000\006\017" +
    "\031\020\027\001\002\000\004\016\026\001\002\000\004" +
    "\052\016\001\002\000\012\005\ufffc\017\ufffc\020\ufffc\052" +
    "\016\001\002\000\006\013\020\015\017\001\002\000\012" +
    "\005\ufffa\017\ufffa\020\ufffa\052\ufffa\001\002\000\006\013" +
    "\ufff7\015\ufff7\001\002\000\004\052\023\001\002\000\004" +
    "\052\021\001\002\000\006\013\ufff8\015\ufff8\001\002\000" +
    "\004\014\024\001\002\000\010\011\ufff6\013\ufff6\014\ufff6" +
    "\001\002\000\012\005\ufff9\017\ufff9\020\ufff9\052\ufff9\001" +
    "\002\000\012\005\ufffb\017\ufffb\020\ufffb\052\ufffb\001\002" +
    "\000\004\002\000\001\002\000\004\052\232\001\002\000" +
    "\010\005\ufff3\017\ufff3\020\ufff3\001\002\000\004\052\214" +
    "\001\002\000\010\005\ufff4\017\ufff4\020\ufff4\001\002\000" +
    "\010\005\036\017\031\020\027\001\002\000\010\005\ufff2" +
    "\017\ufff2\020\ufff2\001\002\000\004\016\uffff\001\002\000" +
    "\012\023\043\026\051\051\052\052\053\001\002\000\010" +
    "\005\ufff5\017\ufff5\020\ufff5\001\002\000\014\006\uffe8\023" +
    "\uffe8\026\uffe8\051\uffe8\052\uffe8\001\002\000\014\006\uffe6" +
    "\023\uffe6\026\uffe6\051\uffe6\052\uffe6\001\002\000\014\006" +
    "\uffea\023\uffea\026\uffea\051\uffea\052\uffea\001\002\000\010" +
    "\010\161\051\165\052\163\001\002\000\024\006\uffe9\023" +
    "\uffe9\026\uffe9\035\062\036\061\037\063\040\060\051\uffe9" +
    "\052\uffe9\001\002\000\026\006\uffe5\014\uffe5\023\uffe5\026" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\051\uffe5\052\uffe5" +
    "\001\002\000\046\006\uffe4\011\uffe4\013\uffe4\014\uffe4\023" +
    "\uffe4\026\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\051\uffe4\052" +
    "\uffe4\001\002\000\014\006\157\023\043\026\051\051\052" +
    "\052\053\001\002\000\014\006\uffe7\023\uffe7\026\uffe7\051" +
    "\uffe7\052\uffe7\001\002\000\004\010\127\001\002\000\046" +
    "\006\uffe2\011\uffe2\013\uffe2\014\uffe2\023\uffe2\026\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\051\uffe2\052\uffe2\001\002\000" +
    "\030\006\uffe3\010\054\012\055\023\uffe3\026\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\051\uffe3\052\uffe3\001\002\000" +
    "\006\051\106\052\105\001\002\000\006\051\052\052\057" +
    "\001\002\000\026\006\uffb5\014\064\023\uffb5\026\uffb5\035" +
    "\062\036\061\037\063\040\060\051\uffb5\052\uffb5\001\002" +
    "\000\050\006\uffe3\010\054\011\uffe3\013\uffe3\014\uffe3\023" +
    "\uffe3\026\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\051\uffe3\052" +
    "\uffe3\001\002\000\006\051\052\052\057\001\002\000\006" +
    "\051\052\052\057\001\002\000\006\051\052\052\057\001" +
    "\002\000\006\051\052\052\057\001\002\000\014\006\uffb4" +
    "\023\uffb4\026\uffb4\051\uffb4\052\uffb4\001\002\000\014\014" +
    "\067\035\062\036\061\037\063\040\060\001\002\000\046" +
    "\006\uffbb\011\uffe5\013\uffe5\014\uffe5\023\uffbb\026\uffbb\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\045\uffe5\046\uffe5\051\uffbb\052\uffbb\001\002\000" +
    "\046\006\uffba\011\uffba\013\uffba\014\uffba\023\uffba\026\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\045\uffba\046\uffba\051\uffba\052\uffba\001\002" +
    "\000\014\014\072\035\062\036\061\037\063\040\060\001" +
    "\002\000\046\006\uffb7\011\uffe5\013\uffe5\014\uffe5\023\uffb7" +
    "\026\uffb7\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\051\uffb7\052\uffb7" +
    "\001\002\000\046\006\uffb6\011\uffb6\013\uffb6\014\uffb6\023" +
    "\uffb6\026\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\051\uffb6\052" +
    "\uffb6\001\002\000\014\014\075\035\062\036\061\037\063" +
    "\040\060\001\002\000\046\006\uffbd\011\uffe5\013\uffe5\014" +
    "\uffe5\023\uffbd\026\uffbd\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\051" +
    "\uffbd\052\uffbd\001\002\000\046\006\uffbc\011\uffbc\013\uffbc" +
    "\014\uffbc\023\uffbc\026\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\051\uffbc\052\uffbc\001\002\000\014\014\100\035\062\036" +
    "\061\037\063\040\060\001\002\000\046\006\uffb9\011\uffe5" +
    "\013\uffe5\014\uffe5\023\uffb9\026\uffb9\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\046\uffe5\051\uffb9\052\uffb9\001\002\000\046\006\uffb8\011" +
    "\uffb8\013\uffb8\014\uffb8\023\uffb8\026\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\051\uffb8\052\uffb8\001\002\000\006\011\uffc9" +
    "\013\uffc9\001\002\000\006\011\uffc8\013\uffc8\001\002\000" +
    "\012\035\115\036\114\037\116\040\113\001\002\000\006" +
    "\011\107\013\110\001\002\000\020\010\054\011\uffc7\013" +
    "\uffc7\035\uffe3\036\uffe3\037\uffe3\040\uffe3\001\002\000\016" +
    "\011\uffc6\013\uffc6\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001" +
    "\002\000\004\014\112\001\002\000\006\051\106\052\105" +
    "\001\002\000\006\011\uffca\013\uffca\001\002\000\050\006" +
    "\uffcb\011\uffcb\013\uffcb\014\uffcb\023\uffcb\024\uffcb\026\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\046\uffcb\051\uffcb\052\uffcb\001\002" +
    "\000\006\051\052\052\057\001\002\000\006\051\052\052" +
    "\057\001\002\000\006\051\052\052\057\001\002\000\006" +
    "\051\052\052\057\001\002\000\022\011\uffc3\013\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\001\002" +
    "\000\034\011\uffc2\013\uffc2\014\067\035\115\036\114\037" +
    "\116\040\113\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\001\002\000\022\011\uffbf\013\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\001\002\000\034" +
    "\011\uffbe\013\uffbe\014\072\035\115\036\114\037\116\040" +
    "\113\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\001\002\000\022\011\uffc5\013\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\001\002\000\034\011\uffc4" +
    "\013\uffc4\014\075\035\115\036\114\037\116\040\113\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\001\002" +
    "\000\022\011\uffc1\013\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\001\002\000\034\011\uffc0\013\uffc0" +
    "\014\100\035\115\036\114\037\116\040\113\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\001\002\000\006" +
    "\051\134\052\135\001\002\000\004\011\153\001\002\000" +
    "\020\011\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\001\002\000\020\011\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\001\002\000\030\011\uffd6" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\001\002\000\030\011\uffd4" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\001\002\000\032\010\054" +
    "\011\uffd5\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\001\002\000\016" +
    "\041\137\042\140\043\141\044\143\045\142\046\144\001" +
    "\002\000\006\051\134\052\135\001\002\000\006\051\134" +
    "\052\135\001\002\000\006\051\134\052\135\001\002\000" +
    "\006\051\134\052\135\001\002\000\006\051\134\052\135" +
    "\001\002\000\006\051\134\052\135\001\002\000\004\011" +
    "\uffd0\001\002\000\004\011\uffd1\001\002\000\004\011\uffd2" +
    "\001\002\000\004\011\uffd3\001\002\000\004\011\uffce\001" +
    "\002\000\004\011\uffcf\001\002\000\004\027\154\001\002" +
    "\000\004\005\036\001\002\000\014\006\uffdd\023\uffdd\026" +
    "\uffdd\051\uffdd\052\uffdd\001\002\000\014\006\uffeb\023\uffeb" +
    "\026\uffeb\051\uffeb\052\uffeb\001\002\000\026\005\uffec\006" +
    "\uffec\016\uffec\017\uffec\020\uffec\023\uffec\025\uffec\026\uffec" +
    "\051\uffec\052\uffec\001\002\000\020\024\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\001\002\000\006" +
    "\051\134\052\135\001\002\000\016\041\173\042\174\043" +
    "\175\044\176\045\177\046\200\001\002\000\022\010\054" +
    "\024\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\001\002\000\004\024\166\001\002\000\020\024\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\001" +
    "\002\000\004\005\036\001\002\000\016\006\uffdf\023\uffdf" +
    "\025\170\026\uffdf\051\uffdf\052\uffdf\001\002\000\004\005" +
    "\036\001\002\000\014\006\uffe1\023\uffe1\026\uffe1\051\uffe1" +
    "\052\uffe1\001\002\000\014\006\uffde\023\uffde\026\uffde\051" +
    "\uffde\052\uffde\001\002\000\006\051\165\052\163\001\002" +
    "\000\006\051\165\052\163\001\002\000\006\051\165\052" +
    "\163\001\002\000\006\051\165\052\163\001\002\000\006" +
    "\051\165\052\163\001\002\000\006\051\165\052\163\001" +
    "\002\000\004\024\uffd9\001\002\000\004\024\uffdb\001\002" +
    "\000\004\024\uffda\001\002\000\004\024\uffdc\001\002\000" +
    "\004\024\uffd7\001\002\000\004\024\uffd8\001\002\000\004" +
    "\011\210\001\002\000\004\024\211\001\002\000\004\005" +
    "\036\001\002\000\016\006\uffdf\023\uffdf\025\170\026\uffdf" +
    "\051\uffdf\052\uffdf\001\002\000\014\006\uffe0\023\uffe0\026" +
    "\uffe0\051\uffe0\052\uffe0\001\002\000\004\010\215\001\002" +
    "\000\004\052\217\001\002\000\006\011\uffee\013\uffee\001" +
    "\002\000\004\015\230\001\002\000\006\011\221\013\222" +
    "\001\002\000\004\014\224\001\002\000\004\052\217\001" +
    "\002\000\006\011\uffef\013\uffef\001\002\000\006\005\ufffd" +
    "\007\012\001\002\000\004\005\036\001\002\000\010\005" +
    "\ufff1\017\ufff1\020\ufff1\001\002\000\010\005\ufffe\017\ufffe" +
    "\020\ufffe\001\002\000\004\052\023\001\002\000\006\011" +
    "\uffed\013\uffed\001\002\000\004\010\233\001\002\000\004" +
    "\052\217\001\002\000\006\011\235\013\222\001\002\000" +
    "\004\015\236\001\002\000\004\052\023\001\002\000\004" +
    "\014\240\001\002\000\006\005\ufffd\007\012\001\002\000" +
    "\010\005\ufff0\017\ufff0\020\ufff0\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\010\006\007" +
    "\001\001\000\012\003\032\035\027\036\033\037\031\001" +
    "\001\000\002\001\001\000\010\007\012\010\014\011\013" +
    "\001\001\000\006\010\024\011\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\034\035\027" +
    "\036\033\037\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\013\046\014\041\015\043\016\044\017\037" +
    "\020\045\030\047\031\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\020\157\024\161\026\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\155\015\043" +
    "\016\044\017\037\020\045\030\047\031\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\015\102\016\044\020\045\021\100\022" +
    "\101\023\103\001\001\000\010\015\055\016\044\020\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\075\016\076\020\045\001\001\000\010\015\072\016\073" +
    "\020\045\001\001\000\010\015\067\016\070\020\045\001" +
    "\001\000\010\015\064\016\065\020\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\102\016\044\020\045\021\110\022\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\125" +
    "\016\076\020\045\022\124\001\001\000\012\015\123\016" +
    "\073\020\045\022\122\001\001\000\012\015\121\016\070" +
    "\020\045\022\120\001\001\000\012\015\117\016\065\020" +
    "\045\022\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\102\016\044\020\132\022\130\024\131\025\135\027" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\015\102\016\044\020\132" +
    "\022\130\024\131\025\151\001\001\000\016\015\102\016" +
    "\044\020\132\022\130\024\131\025\150\001\001\000\016" +
    "\015\102\016\044\020\132\022\130\024\131\025\147\001" +
    "\001\000\016\015\102\016\044\020\132\022\130\024\131" +
    "\025\146\001\001\000\016\015\102\016\044\020\132\022" +
    "\130\024\131\025\145\001\001\000\016\015\102\016\044" +
    "\020\132\022\130\024\131\025\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\102\016" +
    "\044\020\132\022\130\024\131\025\135\027\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\166\001\001\000\004\032\170" +
    "\001\001\000\004\004\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\157\024\205\001\001\000\006" +
    "\020\157\024\204\001\001\000\006\020\157\024\203\001" +
    "\001\000\006\020\157\024\202\001\001\000\006\020\157" +
    "\024\201\001\001\000\006\020\157\024\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\211\001\001\000\004" +
    "\032\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\215\034\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\222\001\001\000\002\001\001\000\006\006\224\040\225" +
    "\001\001\000\004\004\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\215\034\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\236\001\001" +
    "\000\002\001\001\000\006\006\224\040\240\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private NodeFactory factory = new NodeFactory();

public void report_error(String message, Object info){

    try {
        RascalSymbol s = (RascalSymbol) info;
        CompilerLogger.print(message);
        String detalhe = "Erro! Linha: " + s.getLine() + " Coluna: " + s.getColumn();
        CompilerLogger.print(detalhe);
    } catch (Exception e) {

        CompilerLogger.print("Erro inesperado");
        CompilerLogger.print(message);
    }

}

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }

 public void syntax_error(RascalSymbol s){
    CompilerLogger.print("compiler has detected a syntax error at line " + s.getLine()
        + " column " + s.getColumn() + "\n");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintatico$actions {
  private final Sintatico parser;

  /** Constructor */
  CUP$Sintatico$actions(Sintatico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintatico$do_action_part00000000(
    int                        CUP$Sintatico$act_num,
    java_cup.runtime.lr_parser CUP$Sintatico$parser,
    java.util.Stack            CUP$Sintatico$stack,
    int                        CUP$Sintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintatico$result;

      /* select the action based on the action number */
      switch (CUP$Sintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Bloco start_val = (Bloco)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		RESULT = start_val;
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintatico$parser.done_parsing();
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= T_PROGRAM T_IDENT T_PONTO_E_VIRGULA bloco T_PONTO 
            {
              Bloco RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Bloco p4 = (Bloco)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = p4; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloco ::= secao_declara_vars secao_declara_subs comando_composto 
            {
              Bloco RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<DecVar> p1 = (List<DecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<Comando> p2 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<Comando> p3 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildBloco(p1, p2, p3);  
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("bloco",3, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blocoSub ::= secao_declara_vars comando_composto 
            {
              BlocoSub RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<DecVar> p1 = (List<DecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<Comando> p2 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildBlocoSub(p1, p2);  
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("blocoSub",30, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // secao_declara_vars ::= 
            {
              List<DecVar> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_vars",4, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // secao_declara_vars ::= T_VAR lista_declara_vars 
            {
              List<DecVar> RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<TpDecVar> p2 = (List<TpDecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildListDecVar(p2); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_vars",4, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declara_vars ::= lista_declara_vars declara_vars 
            {
              List<TpDecVar> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<TpDecVar> p1 = (List<TpDecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		TpDecVar p2 = (TpDecVar)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildListTpDecVar(p1, p2); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_declara_vars",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_declara_vars ::= declara_vars 
            {
              List<TpDecVar> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		TpDecVar p1 = (TpDecVar)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildListTpDecVar(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_declara_vars",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declara_vars ::= lista_ident T_DOIS_PONTOS tipo T_PONTO_E_VIRGULA 
            {
              TpDecVar RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		List<LexerToken> p1 = (List<LexerToken>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		LexerToken p3 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildTpDecVar(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("declara_vars",6, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_ident ::= lista_ident T_VIRGULA T_IDENT 
            {
              List<LexerToken> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<LexerToken> p1 = (List<LexerToken>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p3 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildIdentList(p1, p3);
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_ident",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_ident ::= T_IDENT 
            {
              List<LexerToken> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildIdentList(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_ident",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= T_IDENT 
            {
              LexerToken RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // secao_declara_subs ::= secao_declara_subs decSubs 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<Comando> p1 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p2 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstDecSub(p1, p2); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_subs",1, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // secao_declara_subs ::= decSubs 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstDecSub(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_subs",1, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decSubs ::= declaraProcedimento 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		DecProc p1 = (DecProc)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("decSubs",29, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decSubs ::= declaraFuncao 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		DecFunc p1 = (DecFunc)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("decSubs",29, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaraProcedimento ::= T_PROCEDURE T_IDENT T_ABRE_PARENTESES lstParamFunc T_FECHA_PARENTESES T_PONTO_E_VIRGULA blocoSub 
            {
              DecProc RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-5)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-5)).right;
		LexerToken p2 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-5)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		List<DecVar> p4 = (List<DecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p7left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p7right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		BlocoSub p7 = (BlocoSub)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildDecProc(p2, p4, p7); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("declaraProcedimento",27, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaraFuncao ::= T_FUNCTION T_IDENT T_ABRE_PARENTESES lstParamFunc T_FECHA_PARENTESES T_DOIS_PONTOS tipo T_PONTO_E_VIRGULA blocoSub 
            {
              DecFunc RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-7)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-7)).right;
		LexerToken p2 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-7)).value;
		int p4left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-5)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-5)).right;
		List<DecVar> p4 = (List<DecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-5)).value;
		int p7left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p7right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		LexerToken p7 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p9left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p9right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		BlocoSub p9 = (BlocoSub)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildDecFunc(p2, p4, p9, p7); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("declaraFuncao",28, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lstParamFunc ::= lstParamFunc T_VIRGULA decParamFunc 
            {
              List<DecVar> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<DecVar> p1 = (List<DecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		DecVar p3 = (DecVar)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstParam(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lstParamFunc",26, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lstParamFunc ::= decParamFunc 
            {
              List<DecVar> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		DecVar p1 = (DecVar)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstParam(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lstParamFunc",26, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // decParamFunc ::= T_IDENT T_DOIS_PONTOS tipo 
            {
              DecVar RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p3 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildParamDecVar(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("decParamFunc",25, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comando_composto ::= T_BEGIN comandos T_END 
            {
              List<Comando> RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<Comando> p2 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = p2; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando_composto",2, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comandos ::= comandos comando 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<Comando> p1 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p2 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstComandos(p1, p2); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comandos",9, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comandos ::= comando 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstComandos(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comandos",9, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comando ::= comando_secundario 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando ::= cmdAtrib 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comando ::= cmdIf 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comando ::= cmdWhile 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comando_secundario ::= cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando_secundario",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comando_secundario ::= cmdChamaFunc 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando_secundario",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comando_secundario ::= T_IDENT 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando_secundario",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comando_secundario ::= T_NUM 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando_secundario",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cmdIf ::= T_IF cmdExpBinSimples T_THEN comando_composto cmdElse 
            {
              Comando RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		CmdExpBin p2 = (CmdExpBin)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p5left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p5right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<Comando> p5 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p6left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p6right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<Comando> p6 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildCmdIf(p2, p5, p6); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdIf",22, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cmdIf ::= T_IF T_ABRE_PARENTESES cmdExpBinComposta T_FECHA_PARENTESES T_THEN comando_composto cmdElse 
            {
              Comando RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).right;
		CmdExpBin p2 = (CmdExpBin)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).value;
		int p5left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p5right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<Comando> p5 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p6left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p6right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<Comando> p6 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildCmdIf(p2, p5, p6); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdIf",22, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cmdElse ::= 
            {
              List<Comando> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdElse",24, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cmdElse ::= T_ELSE comando_composto 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<Comando> p1 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdElse",24, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cmdWhile ::= T_WHILE T_ABRE_PARENTESES cmdExpBinComposta T_FECHA_PARENTESES T_DO comando_composto 
            {
              Comando RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		CmdExpBin p2 = (CmdExpBin)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p5left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p5right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<Comando> p5 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildCmdWhile(p2, p5); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdWhile",23, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cmdExpBinSimples ::= opBinSimples T_MAIOR_QUE opBinSimples 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MAIOR_QUE, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinSimples",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cmdExpBinSimples ::= opBinSimples T_MAIOR_IGUAL opBinSimples 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MAIOR_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinSimples",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cmdExpBinSimples ::= opBinSimples T_MENOR_QUE opBinSimples 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MENOR_QUE, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinSimples",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cmdExpBinSimples ::= opBinSimples T_MENOR_IGUAL opBinSimples 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MENOR_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinSimples",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cmdExpBinSimples ::= opBinSimples T_IGUAL opBinSimples 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinSimples",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cmdExpBinSimples ::= opBinSimples T_NAO_IGUAL opBinSimples 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_NAO_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinSimples",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // opBinSimples ::= cmdChamaFunc 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("opBinSimples",18, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // opBinSimples ::= T_IDENT 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("opBinSimples",18, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opBinSimples ::= T_NUM 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("opBinSimples",18, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cmdExpBinComposta ::= OpBinComposta T_MAIOR_QUE OpBinComposta 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MAIOR_QUE, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinComposta",21, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cmdExpBinComposta ::= OpBinComposta T_MAIOR_IGUAL OpBinComposta 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MAIOR_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinComposta",21, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cmdExpBinComposta ::= OpBinComposta T_MENOR_QUE OpBinComposta 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MENOR_QUE, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinComposta",21, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cmdExpBinComposta ::= OpBinComposta T_MENOR_IGUAL OpBinComposta 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MENOR_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinComposta",21, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cmdExpBinComposta ::= OpBinComposta T_IGUAL OpBinComposta 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinComposta",21, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cmdExpBinComposta ::= OpBinComposta T_NAO_IGUAL OpBinComposta 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_NAO_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinComposta",21, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OpBinComposta ::= opBinSimples 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("OpBinComposta",19, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OpBinComposta ::= paramArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("OpBinComposta",19, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cmdChamaFunc ::= T_IDENT T_ABRE_PARENTESES lstParams T_FECHA_PARENTESES T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<Comando> p3 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		 RESULT = factory.buildChamaFunc(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdChamaFunc",14, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lstParams ::= lstParams T_VIRGULA paramFunc 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<Comando> p1 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstComandos(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lstParams",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lstParams ::= paramFunc 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstComandos(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lstParams",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramFunc ::= paramArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramFunc",15, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paramFunc ::= T_IDENT 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramFunc",15, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // paramFunc ::= T_NUM 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramFunc",15, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // paramArit ::= comando_secundario T_MAIS paramArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paramArit ::= comando_secundario T_MAIS comando_secundario 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // paramArit ::= comando_secundario T_MENOS paramArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // paramArit ::= comando_secundario T_MENOS comando_secundario 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paramArit ::= comando_secundario T_MULTIPLICACAO paramArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // paramArit ::= comando_secundario T_MULTIPLICACAO comando_secundario 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paramArit ::= comando_secundario T_DIV paramArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paramArit ::= comando_secundario T_DIV comando_secundario 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cmdExpArit ::= comando_secundario T_MAIS cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cmdExpArit ::= comando_secundario T_MAIS comando_secundario T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cmdExpArit ::= comando_secundario T_MENOS cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cmdExpArit ::= comando_secundario T_MENOS comando_secundario T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cmdExpArit ::= comando_secundario T_MULTIPLICACAO cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cmdExpArit ::= comando_secundario T_MULTIPLICACAO comando_secundario T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cmdExpArit ::= comando_secundario T_DIV cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cmdExpArit ::= comando_secundario T_DIV comando_secundario T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cmdAtrib ::= T_IDENT T_ATRIBUICAO comando_secundario 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildCmdAtrib(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdAtrib",13, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cmdAtrib ::= T_IDENT T_ATRIBUICAO comando_secundario T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildCmdAtrib(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdAtrib",13, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintatico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintatico$do_action(
    int                        CUP$Sintatico$act_num,
    java_cup.runtime.lr_parser CUP$Sintatico$parser,
    java.util.Stack            CUP$Sintatico$stack,
    int                        CUP$Sintatico$top)
    throws java.lang.Exception
    {
              return CUP$Sintatico$do_action_part00000000(
                               CUP$Sintatico$act_num,
                               CUP$Sintatico$parser,
                               CUP$Sintatico$stack,
                               CUP$Sintatico$top);
    }
}

}

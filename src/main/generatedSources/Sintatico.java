
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package generatedSources;

import utils.*;
import tipos.*;
import core.*;
import java_cup.runtime.Symbol;
import generatedSources.sym;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintatico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Sintatico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\007\000\002\005" +
    "\005\000\002\006\002\000\002\006\004\000\002\007\004" +
    "\000\002\007\003\000\002\010\006\000\002\011\005\000" +
    "\002\011\003\000\002\012\003\000\002\003\002\000\002" +
    "\004\005\000\002\013\004\000\002\013\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\030\007\000\002\030\011\000\002" +
    "\032\002\000\002\032\004\000\002\031\010\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\025\003\000\002\025\003" +
    "\000\002\020\007\000\002\023\005\000\002\023\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\016\005\000\002\016\006\000" +
    "\002\016\005\000\002\016\006\000\002\016\005\000\002" +
    "\016\006\000\002\016\005\000\002\016\006\000\002\017" +
    "\005\000\002\017\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\004\005\001\002\000\004\002\206\001" +
    "\002\000\004\052\006\001\002\000\004\014\007\001\002" +
    "\000\006\005\ufffe\007\012\001\002\000\004\005\ufff6\001" +
    "\002\000\004\016\026\001\002\000\004\052\016\001\002" +
    "\000\006\005\ufffd\052\016\001\002\000\006\013\017\015" +
    "\020\001\002\000\006\005\ufffb\052\ufffb\001\002\000\006" +
    "\013\ufff8\015\ufff8\001\002\000\004\052\024\001\002\000" +
    "\004\052\022\001\002\000\004\014\023\001\002\000\004" +
    "\014\ufff7\001\002\000\006\005\ufffa\052\ufffa\001\002\000" +
    "\006\013\ufff9\015\ufff9\001\002\000\006\005\ufffc\052\ufffc" +
    "\001\002\000\004\002\000\001\002\000\004\005\031\001" +
    "\002\000\004\016\uffff\001\002\000\012\023\035\026\043" +
    "\051\044\052\045\001\002\000\014\006\ufff1\023\ufff1\026" +
    "\ufff1\051\ufff1\052\ufff1\001\002\000\014\006\uffef\023\uffef" +
    "\026\uffef\051\uffef\052\uffef\001\002\000\014\006\ufff3\023" +
    "\ufff3\026\ufff3\051\ufff3\052\ufff3\001\002\000\010\010\153" +
    "\051\157\052\155\001\002\000\024\006\ufff2\023\ufff2\026" +
    "\ufff2\035\054\036\053\037\055\040\052\051\ufff2\052\ufff2" +
    "\001\002\000\026\006\uffee\014\uffee\023\uffee\026\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\051\uffee\052\uffee\001\002" +
    "\000\014\006\151\023\035\026\043\051\044\052\045\001" +
    "\002\000\046\006\uffed\011\uffed\013\uffed\014\uffed\023\uffed" +
    "\026\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\uffed\051\uffed\052\uffed" +
    "\001\002\000\014\006\ufff0\023\ufff0\026\ufff0\051\ufff0\052" +
    "\ufff0\001\002\000\004\010\121\001\002\000\046\006\uffeb" +
    "\011\uffeb\013\uffeb\014\uffeb\023\uffeb\026\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\051\uffeb\052\uffeb\001\002\000\030\006" +
    "\uffec\010\046\012\047\023\uffec\026\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\051\uffec\052\uffec\001\002\000\006\051" +
    "\100\052\076\001\002\000\006\051\044\052\051\001\002" +
    "\000\026\006\uffbe\014\056\023\uffbe\026\uffbe\035\054\036" +
    "\053\037\055\040\052\051\uffbe\052\uffbe\001\002\000\050" +
    "\006\uffec\010\046\011\uffec\013\uffec\014\uffec\023\uffec\026" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\044\uffec\045\uffec\046\uffec\051\uffec\052\uffec\001" +
    "\002\000\006\051\044\052\051\001\002\000\006\051\044" +
    "\052\051\001\002\000\006\051\044\052\051\001\002\000" +
    "\006\051\044\052\051\001\002\000\014\006\uffbd\023\uffbd" +
    "\026\uffbd\051\uffbd\052\uffbd\001\002\000\014\014\061\035" +
    "\054\036\053\037\055\040\052\001\002\000\046\006\uffc4" +
    "\011\uffee\013\uffee\014\uffee\023\uffc4\026\uffc4\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\051\uffc4\052\uffc4\001\002\000\046\006" +
    "\uffc3\011\uffc3\013\uffc3\014\uffc3\023\uffc3\026\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\051\uffc3\052\uffc3\001\002\000\014" +
    "\014\064\035\054\036\053\037\055\040\052\001\002\000" +
    "\046\006\uffc0\011\uffee\013\uffee\014\uffee\023\uffc0\026\uffc0" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\051\uffc0\052\uffc0\001\002" +
    "\000\046\006\uffbf\011\uffbf\013\uffbf\014\uffbf\023\uffbf\026" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\051\uffbf\052\uffbf\001" +
    "\002\000\014\014\067\035\054\036\053\037\055\040\052" +
    "\001\002\000\046\006\uffc6\011\uffee\013\uffee\014\uffee\023" +
    "\uffc6\026\uffc6\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\051\uffc6\052" +
    "\uffc6\001\002\000\046\006\uffc5\011\uffc5\013\uffc5\014\uffc5" +
    "\023\uffc5\026\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\051\uffc5" +
    "\052\uffc5\001\002\000\014\014\072\035\054\036\053\037" +
    "\055\040\052\001\002\000\046\006\uffc2\011\uffee\013\uffee" +
    "\014\uffee\023\uffc2\026\uffc2\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\051\uffc2\052\uffc2\001\002\000\046\006\uffc1\011\uffc1\013" +
    "\uffc1\014\uffc1\023\uffc1\026\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\051\uffc1\052\uffc1\001\002\000\006\011\uffd2\013\uffd2" +
    "\001\002\000\006\011\uffd1\013\uffd1\001\002\000\012\035" +
    "\107\036\106\037\110\040\105\001\002\000\020\010\046" +
    "\011\uffd0\013\uffd0\035\uffec\036\uffec\037\uffec\040\uffec\001" +
    "\002\000\006\011\101\013\102\001\002\000\016\011\uffcf" +
    "\013\uffcf\035\uffeb\036\uffeb\037\uffeb\040\uffeb\001\002\000" +
    "\004\014\104\001\002\000\006\051\100\052\076\001\002" +
    "\000\006\011\uffd3\013\uffd3\001\002\000\050\006\uffd4\011" +
    "\uffd4\013\uffd4\014\uffd4\023\uffd4\024\uffd4\026\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\051\uffd4\052\uffd4\001\002\000\006" +
    "\051\044\052\051\001\002\000\006\051\044\052\051\001" +
    "\002\000\006\051\044\052\051\001\002\000\006\051\044" +
    "\052\051\001\002\000\022\011\uffcc\013\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\001\002\000\034" +
    "\011\uffcb\013\uffcb\014\061\035\107\036\106\037\110\040" +
    "\105\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\001\002\000\022\011\uffc8\013\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\001\002\000\034\011\uffc7" +
    "\013\uffc7\014\064\035\107\036\106\037\110\040\105\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002" +
    "\000\022\011\uffce\013\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\001\002\000\034\011\uffcd\013\uffcd" +
    "\014\067\035\107\036\106\037\110\040\105\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\001\002\000\022" +
    "\011\uffca\013\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\001\002\000\034\011\uffc9\013\uffc9\014\072" +
    "\035\107\036\106\037\110\040\105\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\001\002\000\006\051\126" +
    "\052\127\001\002\000\004\011\145\001\002\000\020\011" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\001\002\000\020\011\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\001\002\000\030\011\uffdf\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\046\uffdf\001\002\000\030\011\uffdd\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\001\002\000\032\010\046\011\uffde" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\001\002\000\016\041\131" +
    "\042\132\043\133\044\134\045\135\046\136\001\002\000" +
    "\006\051\126\052\127\001\002\000\006\051\126\052\127" +
    "\001\002\000\006\051\126\052\127\001\002\000\006\051" +
    "\126\052\127\001\002\000\006\051\126\052\127\001\002" +
    "\000\006\051\126\052\127\001\002\000\004\011\uffd9\001" +
    "\002\000\004\011\uffdb\001\002\000\004\011\uffda\001\002" +
    "\000\004\011\uffdc\001\002\000\004\011\uffd7\001\002\000" +
    "\004\011\uffd8\001\002\000\004\027\146\001\002\000\004" +
    "\005\031\001\002\000\014\006\uffe6\023\uffe6\026\uffe6\051" +
    "\uffe6\052\uffe6\001\002\000\014\006\ufff4\023\ufff4\026\ufff4" +
    "\051\ufff4\052\ufff4\001\002\000\020\006\ufff5\016\ufff5\023" +
    "\ufff5\025\ufff5\026\ufff5\051\ufff5\052\ufff5\001\002\000\020" +
    "\024\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\001\002\000\006\051\126\052\127\001\002\000\016" +
    "\041\165\042\166\043\167\044\170\045\171\046\172\001" +
    "\002\000\022\010\046\024\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\046\uffde\001\002\000\004\024\160\001" +
    "\002\000\020\024\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\001\002\000\004\005\031\001\002\000" +
    "\016\006\uffe8\023\uffe8\025\162\026\uffe8\051\uffe8\052\uffe8" +
    "\001\002\000\004\005\031\001\002\000\014\006\uffea\023" +
    "\uffea\026\uffea\051\uffea\052\uffea\001\002\000\014\006\uffe7" +
    "\023\uffe7\026\uffe7\051\uffe7\052\uffe7\001\002\000\006\051" +
    "\157\052\155\001\002\000\006\051\157\052\155\001\002" +
    "\000\006\051\157\052\155\001\002\000\006\051\157\052" +
    "\155\001\002\000\006\051\157\052\155\001\002\000\006" +
    "\051\157\052\155\001\002\000\004\024\uffe2\001\002\000" +
    "\004\024\uffe4\001\002\000\004\024\uffe3\001\002\000\004" +
    "\024\uffe5\001\002\000\004\024\uffe0\001\002\000\004\024" +
    "\uffe1\001\002\000\004\011\202\001\002\000\004\024\203" +
    "\001\002\000\004\005\031\001\002\000\016\006\uffe8\023" +
    "\uffe8\025\162\026\uffe8\051\uffe8\052\uffe8\001\002\000\014" +
    "\006\uffe9\023\uffe9\026\uffe9\051\uffe9\052\uffe9\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\010\006\007" +
    "\001\001\000\004\003\026\001\001\000\002\001\001\000" +
    "\010\007\012\010\014\011\013\001\001\000\006\010\024" +
    "\011\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\027\001\001\000\002\001\001\000\022\013\037\014" +
    "\033\015\035\016\036\017\031\020\040\030\041\031\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\151\024\153\026\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\014\147\015\035\016" +
    "\036\017\031\020\040\030\041\031\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\015\074\016\036\020\040" +
    "\021\072\022\073\023\076\001\001\000\010\015\047\016" +
    "\036\020\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\067\016\070\020\040\001\001\000\010\015" +
    "\064\016\065\020\040\001\001\000\010\015\061\016\062" +
    "\020\040\001\001\000\010\015\056\016\057\020\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\015\074\016\036\020\040\021\102" +
    "\022\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\117\016\070\020\040\022\116\001\001\000\012" +
    "\015\115\016\065\020\040\022\114\001\001\000\012\015" +
    "\113\016\062\020\040\022\112\001\001\000\012\015\111" +
    "\016\057\020\040\022\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\074\016\036\020\124\022\122\024\123" +
    "\025\127\027\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\015\074\016" +
    "\036\020\124\022\122\024\123\025\143\001\001\000\016" +
    "\015\074\016\036\020\124\022\122\024\123\025\142\001" +
    "\001\000\016\015\074\016\036\020\124\022\122\024\123" +
    "\025\141\001\001\000\016\015\074\016\036\020\124\022" +
    "\122\024\123\025\140\001\001\000\016\015\074\016\036" +
    "\020\124\022\122\024\123\025\137\001\001\000\016\015" +
    "\074\016\036\020\124\022\122\024\123\025\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\074\016\036\020\124\022\122\024\123\025\127\027" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\160\001\001\000" +
    "\004\032\162\001\001\000\004\004\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\151\024\177\001" +
    "\001\000\006\020\151\024\176\001\001\000\006\020\151" +
    "\024\175\001\001\000\006\020\151\024\174\001\001\000" +
    "\006\020\151\024\173\001\001\000\006\020\151\024\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\203\001" +
    "\001\000\004\032\204\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private NodeFactory factory = new NodeFactory();

public void report_error(String message, Object info){

    try {
        RascalSymbol s = (RascalSymbol) info;
        CompilerLogger.print(message);
        String detalhe = "Erro! Linha: " + s.getLine() + " Coluna: " + s.getColumn();
        CompilerLogger.print(detalhe);
    } catch (Exception e) {

        CompilerLogger.print("Erro inesperado");
        CompilerLogger.print(message);
    }

}

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }

 public void syntax_error(RascalSymbol s){
    CompilerLogger.print("compiler has detected a syntax error at line " + s.getLine()
        + " column " + s.getColumn() + "\n");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintatico$actions {
  private final Sintatico parser;

  /** Constructor */
  CUP$Sintatico$actions(Sintatico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintatico$do_action_part00000000(
    int                        CUP$Sintatico$act_num,
    java_cup.runtime.lr_parser CUP$Sintatico$parser,
    java.util.Stack            CUP$Sintatico$stack,
    int                        CUP$Sintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintatico$result;

      /* select the action based on the action number */
      switch (CUP$Sintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Bloco start_val = (Bloco)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		RESULT = start_val;
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintatico$parser.done_parsing();
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= T_PROGRAM T_IDENT T_PONTO_E_VIRGULA bloco T_PONTO 
            {
              Bloco RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Bloco p4 = (Bloco)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = p4; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloco ::= secao_declara_vars secao_declara_subs comando_composto 
            {
              Bloco RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<DecVar> p1 = (List<DecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<Comando> p3 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildBloco(p1, null, p3);  
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("bloco",3, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // secao_declara_vars ::= 
            {
              List<DecVar> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_vars",4, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // secao_declara_vars ::= T_VAR lista_declara_vars 
            {
              List<DecVar> RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<TpDecVar> p2 = (List<TpDecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildListDecVar(p2); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_vars",4, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declara_vars ::= lista_declara_vars declara_vars 
            {
              List<TpDecVar> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<TpDecVar> p1 = (List<TpDecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		TpDecVar p2 = (TpDecVar)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildListTpDecVar(p1, p2); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_declara_vars",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declara_vars ::= declara_vars 
            {
              List<TpDecVar> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		TpDecVar p1 = (TpDecVar)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildListTpDecVar(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_declara_vars",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declara_vars ::= lista_ident T_DOIS_PONTOS tipo T_PONTO_E_VIRGULA 
            {
              TpDecVar RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		List<LexerToken> p1 = (List<LexerToken>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		LexerToken p3 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildTpDecVar(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("declara_vars",6, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_ident ::= lista_ident T_VIRGULA T_IDENT 
            {
              List<LexerToken> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<LexerToken> p1 = (List<LexerToken>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p3 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildIdentList(p1, p3);
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_ident",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_ident ::= T_IDENT 
            {
              List<LexerToken> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildIdentList(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_ident",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= T_IDENT 
            {
              LexerToken RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // secao_declara_subs ::= 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_subs",1, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comando_composto ::= T_BEGIN comandos T_END 
            {
              List<Comando> RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<Comando> p2 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = p2; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando_composto",2, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comandos ::= comandos comando 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<Comando> p1 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p2 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstComandos(p1, p2); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comandos",9, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comandos ::= comando 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstComandos(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comandos",9, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comando ::= comando_secundario 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comando ::= cmdAtrib 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comando ::= cmdIf 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comando ::= cmdWhile 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comando_secundario ::= cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando_secundario",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comando_secundario ::= cmdChamaFunc 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando_secundario",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comando_secundario ::= T_IDENT 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando_secundario",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comando_secundario ::= T_NUM 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando_secundario",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cmdIf ::= T_IF cmdExpBinSimples T_THEN comando_composto cmdElse 
            {
              Comando RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		CmdExpBin p2 = (CmdExpBin)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p5left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p5right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<Comando> p5 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p6left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p6right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<Comando> p6 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildCmdIf(p2, p5, p6); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdIf",22, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cmdIf ::= T_IF T_ABRE_PARENTESES cmdExpBinComposta T_FECHA_PARENTESES T_THEN comando_composto cmdElse 
            {
              Comando RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).right;
		CmdExpBin p2 = (CmdExpBin)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).value;
		int p5left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p5right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<Comando> p5 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p6left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p6right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<Comando> p6 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildCmdIf(p2, p5, p6); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdIf",22, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cmdElse ::= 
            {
              List<Comando> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdElse",24, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cmdElse ::= T_ELSE comando_composto 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<Comando> p1 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdElse",24, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cmdWhile ::= T_WHILE T_ABRE_PARENTESES cmdExpBinComposta T_FECHA_PARENTESES T_DO comando_composto 
            {
              Comando RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		CmdExpBin p2 = (CmdExpBin)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p5left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p5right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<Comando> p5 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildCmdWhile(p2, p5); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdWhile",23, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cmdExpBinSimples ::= opBinSimples T_MAIOR_QUE opBinSimples 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MAIOR_QUE, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinSimples",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cmdExpBinSimples ::= opBinSimples T_MAIOR_IGUAL opBinSimples 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MAIOR_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinSimples",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cmdExpBinSimples ::= opBinSimples T_MENOR_QUE opBinSimples 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MENOR_QUE, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinSimples",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cmdExpBinSimples ::= opBinSimples T_MENOR_IGUAL opBinSimples 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MENOR_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinSimples",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cmdExpBinSimples ::= opBinSimples T_IGUAL opBinSimples 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinSimples",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cmdExpBinSimples ::= opBinSimples T_NAO_IGUAL opBinSimples 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_NAO_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinSimples",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opBinSimples ::= cmdChamaFunc 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("opBinSimples",18, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opBinSimples ::= T_IDENT 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("opBinSimples",18, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opBinSimples ::= T_NUM 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("opBinSimples",18, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cmdExpBinComposta ::= OpBinComposta T_MAIOR_QUE OpBinComposta 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MAIOR_QUE, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinComposta",21, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cmdExpBinComposta ::= OpBinComposta T_MAIOR_IGUAL OpBinComposta 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MAIOR_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinComposta",21, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cmdExpBinComposta ::= OpBinComposta T_MENOR_QUE OpBinComposta 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MENOR_QUE, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinComposta",21, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cmdExpBinComposta ::= OpBinComposta T_MENOR_IGUAL OpBinComposta 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_MENOR_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinComposta",21, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cmdExpBinComposta ::= OpBinComposta T_IGUAL OpBinComposta 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinComposta",21, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cmdExpBinComposta ::= OpBinComposta T_NAO_IGUAL OpBinComposta 
            {
              CmdExpBin RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpBin(p1,Terminal.T_NAO_IGUAL, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpBinComposta",21, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OpBinComposta ::= opBinSimples 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("OpBinComposta",19, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OpBinComposta ::= paramArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("OpBinComposta",19, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cmdChamaFunc ::= T_IDENT T_ABRE_PARENTESES lstParams T_FECHA_PARENTESES T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<Comando> p3 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		 RESULT = factory.buildChamaFunc(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdChamaFunc",14, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // lstParams ::= lstParams T_VIRGULA paramFunc 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<Comando> p1 = (List<Comando>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstComandos(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lstParams",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // lstParams ::= paramFunc 
            {
              List<Comando> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildLstComandos(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lstParams",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // paramFunc ::= paramArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramFunc",15, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paramFunc ::= T_IDENT 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramFunc",15, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paramFunc ::= T_NUM 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramFunc",15, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // paramArit ::= comando_secundario T_MAIS paramArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paramArit ::= comando_secundario T_MAIS comando_secundario 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // paramArit ::= comando_secundario T_MENOS paramArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // paramArit ::= comando_secundario T_MENOS comando_secundario 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // paramArit ::= comando_secundario T_MULTIPLICACAO paramArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // paramArit ::= comando_secundario T_MULTIPLICACAO comando_secundario 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramArit ::= comando_secundario T_DIV paramArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paramArit ::= comando_secundario T_DIV comando_secundario 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("paramArit",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cmdExpArit ::= comando_secundario T_MAIS cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cmdExpArit ::= comando_secundario T_MAIS comando_secundario T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MAIS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cmdExpArit ::= comando_secundario T_MENOS cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cmdExpArit ::= comando_secundario T_MENOS comando_secundario T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MENOS); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cmdExpArit ::= comando_secundario T_MULTIPLICACAO cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cmdExpArit ::= comando_secundario T_MULTIPLICACAO comando_secundario T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_MULTIPLICACAO); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cmdExpArit ::= comando_secundario T_DIV cmdExpArit 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cmdExpArit ::= comando_secundario T_DIV comando_secundario T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		Comando p1 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildExpArit(p1, p3, Terminal.T_DIV); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdExpArit",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cmdAtrib ::= T_IDENT T_ATRIBUICAO comando_secundario 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = factory.buildCmdAtrib(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdAtrib",13, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cmdAtrib ::= T_IDENT T_ATRIBUICAO comando_secundario T_PONTO_E_VIRGULA 
            {
              Comando RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Comando p3 = (Comando)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = factory.buildCmdAtrib(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("cmdAtrib",13, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintatico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintatico$do_action(
    int                        CUP$Sintatico$act_num,
    java_cup.runtime.lr_parser CUP$Sintatico$parser,
    java.util.Stack            CUP$Sintatico$stack,
    int                        CUP$Sintatico$top)
    throws java.lang.Exception
    {
              return CUP$Sintatico$do_action_part00000000(
                               CUP$Sintatico$act_num,
                               CUP$Sintatico$parser,
                               CUP$Sintatico$stack,
                               CUP$Sintatico$top);
    }
}

}

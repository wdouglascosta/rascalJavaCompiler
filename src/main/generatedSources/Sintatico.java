
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package generatedSources;

import utils.*;
import tipos.*;
import core.*;
import java_cup.runtime.Symbol;
import generatedSources.sym;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintatico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Sintatico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\007\000\002\005" +
    "\005\000\002\006\002\000\002\006\002\000\002\006\004" +
    "\000\002\007\002\000\002\007\004\000\002\007\003\000" +
    "\002\010\002\000\002\010\006\000\002\011\002\000\002" +
    "\011\005\000\002\011\003\000\002\012\003\000\002\003" +
    "\002\000\002\004\005\000\002\013\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\004\004\005\001\002\000\004\002\034\001" +
    "\002\000\004\052\006\001\002\000\004\014\007\001\002" +
    "\000\006\005\ufffe\007\012\001\002\000\004\005\ufff2\001" +
    "\002\000\004\016\026\001\002\000\012\005\ufffb\013\ufffb" +
    "\015\ufffb\052\016\001\002\000\012\005\ufffc\013\ufff8\015" +
    "\ufff8\052\016\001\002\000\006\013\017\015\020\001\002" +
    "\000\012\005\ufff9\013\ufff9\015\ufff9\052\ufff9\001\002\000" +
    "\006\013\ufff4\015\ufff4\001\002\000\004\052\024\001\002" +
    "\000\004\052\022\001\002\000\004\014\023\001\002\000" +
    "\004\014\ufff3\001\002\000\012\005\ufff7\013\ufff7\015\ufff7" +
    "\052\ufff7\001\002\000\006\013\ufff5\015\ufff5\001\002\000" +
    "\012\005\ufffa\013\ufffa\015\ufffa\052\ufffa\001\002\000\004" +
    "\002\000\001\002\000\004\005\031\001\002\000\004\016" +
    "\uffff\001\002\000\004\006\ufff0\001\002\000\004\006\033" +
    "\001\002\000\004\016\ufff1\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\010\006\007" +
    "\001\001\000\004\003\026\001\001\000\002\001\001\000" +
    "\010\007\012\010\014\011\013\001\001\000\006\010\024" +
    "\011\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\027\001\001\000\002\001\001\000\004\013\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private NodeFactory nodeFactory = new NodeFactory();

 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
 
 public void syntax_error(RascalSymbol s){
    CompilerLogger.print("compiler has detected a syntax error at line " + s.getLine()
        + " column " + s.getColumn() + "\n");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintatico$actions {
  private final Sintatico parser;

  /** Constructor */
  CUP$Sintatico$actions(Sintatico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintatico$do_action_part00000000(
    int                        CUP$Sintatico$act_num,
    java_cup.runtime.lr_parser CUP$Sintatico$parser,
    java.util.Stack            CUP$Sintatico$stack,
    int                        CUP$Sintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintatico$result;

      /* select the action based on the action number */
      switch (CUP$Sintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Bloco start_val = (Bloco)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		RESULT = start_val;
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintatico$parser.done_parsing();
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= T_PROGRAM T_IDENT T_PONTO_E_VIRGULA bloco T_PONTO 
            {
              Bloco RESULT =null;
		int p4left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p4right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Bloco p4 = (Bloco)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = p4 ; CompilerLogger.print("Program definition"); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloco ::= secao_declara_vars secao_declara_subs comando_composto 
            {
              Bloco RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<DecVar> p1 = (List<DecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		Object p3 = (Object)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = nodeFactory.buildBloco(p1, null, null);  
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("bloco",3, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // secao_declara_vars ::= 
            {
              List<DecVar> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_vars",4, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // secao_declara_vars ::= 
            {
              List<DecVar> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_vars",4, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // secao_declara_vars ::= T_VAR lista_declara_vars 
            {
              List<DecVar> RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		List<TpDecVar> p2 = (List<TpDecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = nodeFactory.buildListDecVar(p2); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_vars",4, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declara_vars ::= 
            {
              List<TpDecVar> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_declara_vars",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_declara_vars ::= lista_declara_vars declara_vars 
            {
              List<TpDecVar> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		List<TpDecVar> p1 = (List<TpDecVar>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		TpDecVar p2 = (TpDecVar)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = nodeFactory.buildListTpDecVar(p1, p2); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_declara_vars",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_declara_vars ::= declara_vars 
            {
              List<TpDecVar> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		TpDecVar p1 = (TpDecVar)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = nodeFactory.buildListTpDecVar(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_declara_vars",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declara_vars ::= 
            {
              TpDecVar RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("declara_vars",6, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declara_vars ::= lista_ident T_DOIS_PONTOS tipo T_PONTO_E_VIRGULA 
            {
              TpDecVar RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).right;
		List<LexerToken> p1 = (List<LexerToken>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		LexerToken p3 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		 RESULT = nodeFactory.buildTpDecVar(p1, p3); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("declara_vars",6, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_ident ::= 
            {
              List<LexerToken> RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_ident",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_ident ::= lista_ident T_VIRGULA T_IDENT 
            {
              List<LexerToken> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).right;
		List<LexerToken> p1 = (List<LexerToken>)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)).value;
		int p3left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p3right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p3 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = nodeFactory.buildIdentList(p1, p3);
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_ident",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_ident ::= T_IDENT 
            {
              List<LexerToken> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = nodeFactory.buildIdentList(null, p1); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_ident",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= T_IDENT 
            {
              LexerToken RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()).right;
		LexerToken p1 = (LexerToken)((java_cup.runtime.Symbol) CUP$Sintatico$stack.peek()).value;
		 RESULT = p1; 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // secao_declara_subs ::= 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("secao_declara_subs",1, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comando_composto ::= T_BEGIN comandos T_END 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando_composto",2, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comandos ::= 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comandos",9, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintatico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintatico$do_action(
    int                        CUP$Sintatico$act_num,
    java_cup.runtime.lr_parser CUP$Sintatico$parser,
    java.util.Stack            CUP$Sintatico$stack,
    int                        CUP$Sintatico$top)
    throws java.lang.Exception
    {
              return CUP$Sintatico$do_action_part00000000(
                               CUP$Sintatico$act_num,
                               CUP$Sintatico$parser,
                               CUP$Sintatico$stack,
                               CUP$Sintatico$top);
    }
}

}
